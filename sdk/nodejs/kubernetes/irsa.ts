// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import * as pulumiAws from "@pulumi/aws";
import * as pulumiKubernetes from "@pulumi/kubernetes";

/**
 * The Irsa component create an IAM roles for service accounts on AWS and Kubernetes.
 */
export class Irsa extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'cloud-toolkit-aws:kubernetes:Irsa';

    /**
     * Returns true if the given object is an instance of Irsa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Irsa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Irsa.__pulumiType;
    }

    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The list of IAM Policies.
     */
    public readonly policies!: pulumi.Output<pulumiAws.iam.Policy[]>;
    /**
     * The IAM Role.
     */
    public /*out*/ readonly role!: pulumi.Output<pulumiAws.iam.Role>;
    /**
     * The list of IAM Policy Attachments to associate the Roles and Policies.
     */
    public /*out*/ readonly rolePolicyAttachments!: pulumi.Output<pulumiAws.iam.RolePolicyAttachment[]>;
    /**
     * The ServiceAccount created in Kubernetes.
     */
    public /*out*/ readonly serviceAccount!: pulumi.Output<pulumiKubernetes.core.v1.ServiceAccount>;

    /**
     * Create a Irsa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IrsaArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.identityProvidersArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityProvidersArn'");
            }
            if ((!args || args.issuerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUrl'");
            }
            if ((!args || args.k8sProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'k8sProvider'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            if ((!args || args.serviceAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountName'");
            }
            resourceInputs["identityProvidersArn"] = args ? args.identityProvidersArn : undefined;
            resourceInputs["issuerUrl"] = args ? args.issuerUrl : undefined;
            resourceInputs["k8sProvider"] = args ? args.k8sProvider : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["serviceAccountName"] = args ? args.serviceAccountName : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["rolePolicyAttachments"] = undefined /*out*/;
            resourceInputs["serviceAccount"] = undefined /*out*/;
        } else {
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["policies"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
            resourceInputs["rolePolicyAttachments"] = undefined /*out*/;
            resourceInputs["serviceAccount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Irsa.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Irsa resource.
 */
export interface IrsaArgs {
    /**
     * The OIDC Identity Provider arn used by the IRSA.
     */
    identityProvidersArn: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The OIDC Identity Provider url used by the IRSA.
     */
    issuerUrl: pulumi.Input<string>;
    /**
     * Kubernetes provider used by Pulumi.
     */
    k8sProvider: pulumi.Input<pulumiKubernetes.Provider>;
    /**
     * The Namespace name where the addon will be installed.
     */
    namespace: pulumi.Input<string>;
    /**
     * The list of Policies to be associated to the Irsa.
     */
    policies: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Service Account name used in Kubernetes.
     */
    serviceAccountName: pulumi.Input<string>;
}
