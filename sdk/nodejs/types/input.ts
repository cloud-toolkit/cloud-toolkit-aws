// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

export namespace email {
    export interface AdditionalQueueArgsArgs {
        /**
         * Amazon Resource Name for the Queue component.
         */
        arn?: pulumi.Input<string>;
        /**
         * Endpoint of the Queue component in AWS.
         */
        url?: pulumi.Input<string>;
    }

    export interface NotificationTypeArgsArgs {
        /**
         * Enables the feature.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * Include original headers on the stored messages in the Queue(s).
         */
        includeOriginalHeaders?: pulumi.Input<boolean>;
        /**
         * Arguments to configure the Queues subscribed to the Notification Type Topic.
         * If left blank, a default standard, non-fifo, Queue and a Dead Letter Queue that is attached to the former will be created.
         */
        queues?: pulumi.Input<inputs.email.NotificationTypeQueuesArgsArgs>;
    }

    export interface NotificationTypeQueuesArgsArgs {
        /**
         * Arguments to include Queues built and implemented outside of the Email Sender Component. Useful when subscribing a single Queue to two or more Topics or when migrating existing ones.
         */
        additionalQueues?: pulumi.Input<pulumi.Input<inputs.email.AdditionalQueueArgsArgs>[]>;
        /**
         * Configuration for the Default Queues. If left blank, Queues created for this Notification Type will be standard, non-fifo, with a Dead Letter Queue attached to them.
         */
        defaultQueuesConfig?: pulumi.Input<inputs.serverless.QueueArgsArgs>;
        /**
         * Number of default Queues that will be created and attached to a Topic.
         */
        numberOfDefaultQueues?: pulumi.Input<number>;
    }
}

export namespace kubernetes {
    export interface ClusterApiArgsArgs {
        /**
         * Configure the private endpoint for the Kubernetes API.
         */
        private?: pulumi.Input<inputs.kubernetes.ClusterPrivateApiArgsArgs>;
        /**
         * Configure the public endpoint for the Kubernetes API.
         */
        public?: pulumi.Input<inputs.kubernetes.ClusterPublicApiArgsArgs>;
    }

    export interface ClusterNodeGroupArgsArgs {
        /**
         * The EC2 Instance Type to be used to create the Nodes.
         */
        instanceType?: pulumi.Input<string>;
        /**
         * The maxium number of nodes running in the node group. Defaults to 2.
         */
        maxCount?: pulumi.Input<number>;
        /**
         * The maximum number of nodes unavailable at once during a version update. Defaults to 1.
         */
        maxUnavailable?: pulumi.Input<number>;
        /**
         * The minimum number of nodes running in the node group. Defaults to 1.
         */
        minCount?: pulumi.Input<number>;
        /**
         * The Node Group name.
         */
        name?: pulumi.Input<string>;
        /**
         * The subnets type to be used to deploy the Node Groups.
         */
        subnetsType?: pulumi.Input<enums.kubernetes.ClusterSubnetsType>;
    }

    export interface ClusterOidcProvidersArgsArgs {
        /**
         * Enable the default OIDC Provider that is used in the cluster to let Service Accounts to authenticate against AWS with a given IAM Role.
         */
        enableDefaultProvider?: pulumi.Input<boolean>;
    }

    export interface ClusterPrivateApiArgsArgs {
        /**
         * Enable the private endpoint for Kubernetes API.
         */
        enabled?: pulumi.Input<boolean>;
    }

    export interface ClusterPublicApiArgsArgs {
        /**
         * Enable the public endpoint for Kubernetes API.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The list of CIDR that will be allowed to reach the public endpoint for Kubernetes API.
         */
        whitelist?: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace serverless {
    export interface DeadLetterQueueTypeArgsArgs {
        /**
         * Enables the feature.
         */
        enable?: pulumi.Input<boolean>;
        /**
         * Placing a Queue ARN will set said already existing Queue as a Dead Letter Queue for the new one.
         */
        existingDeadLetterQueueArn?: pulumi.Input<string>;
        /**
         * The amount of time that a message will be stored in the Dead Letter Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
         */
        messageRetentionSeconds?: pulumi.Input<number>;
        /**
         * Dead Letter Queue type attached to the component to create.
         */
        type?: pulumi.Input<enums.serverless.DeadLetterQueueTypes>;
    }

    export interface QueueArgsArgs {
        /**
         * Dead Letter Queue attached to the component to create.
         */
        DeadLetterQueueTypeArgs?: pulumi.Input<inputs.serverless.DeadLetterQueueTypeArgsArgs>;
        /**
         * Set to true to create the Queue as FiFo. False for a Standard Queue.
         */
        isFifo?: pulumi.Input<boolean>;
        /**
         * The limit for a Queue message size in bytes. Minimum is 1 byte (1 character) and Maximum 262,144 bytes (256 KiB). By default a message can be 256 KiB large.
         */
        maxMessageSize?: pulumi.Input<number>;
        /**
         * The amount of time that a message will be stored in the Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
         */
        messageRetentionSeconds?: pulumi.Input<number>;
        /**
         * Custom policy for the Queue.
         */
        policy?: pulumi.Input<string>;
    }
}
