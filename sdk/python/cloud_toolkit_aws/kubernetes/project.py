# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._inputs import *
import pulumi_kubernetes

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 kubeconfig: pulumi.Input[str],
                 name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 admin_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 edit_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources: Optional[pulumi.Input['ProjectResourcesArgsArgs']] = None,
                 view_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input[str] kubeconfig: The kubeconfig to access the kubernetes cluster.
        :param pulumi.Input[str] name: The Project name.
        :param pulumi.Input[str] namespace: The Namespace name where the addon will be installed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] admin_user_arns: The list of AWS IAM User arns that can access to this project with 'admin' role.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] edit_user_arns: The list of AWS IAM User arns that can access to this project with 'edit' role.
        :param pulumi.Input['ProjectResourcesArgsArgs'] resources: The cluster resources to be assigned to the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] view_user_arns: The list of AWS IAM User arns that can access to this project with 'view' role.
        """
        pulumi.set(__self__, "kubeconfig", kubeconfig)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        if admin_user_arns is not None:
            pulumi.set(__self__, "admin_user_arns", admin_user_arns)
        if edit_user_arns is not None:
            pulumi.set(__self__, "edit_user_arns", edit_user_arns)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if view_user_arns is not None:
            pulumi.set(__self__, "view_user_arns", view_user_arns)

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Input[str]:
        """
        The kubeconfig to access the kubernetes cluster.
        """
        return pulumi.get(self, "kubeconfig")

    @kubeconfig.setter
    def kubeconfig(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubeconfig", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The Project name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The Namespace name where the addon will be installed.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="adminUserArns")
    def admin_user_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of AWS IAM User arns that can access to this project with 'admin' role.
        """
        return pulumi.get(self, "admin_user_arns")

    @admin_user_arns.setter
    def admin_user_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "admin_user_arns", value)

    @property
    @pulumi.getter(name="editUserArns")
    def edit_user_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of AWS IAM User arns that can access to this project with 'edit' role.
        """
        return pulumi.get(self, "edit_user_arns")

    @edit_user_arns.setter
    def edit_user_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "edit_user_arns", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['ProjectResourcesArgsArgs']]:
        """
        The cluster resources to be assigned to the project.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['ProjectResourcesArgsArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="viewUserArns")
    def view_user_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of AWS IAM User arns that can access to this project with 'view' role.
        """
        return pulumi.get(self, "view_user_arns")

    @view_user_arns.setter
    def view_user_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "view_user_arns", value)


class Project(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 edit_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubeconfig: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['ProjectResourcesArgsArgs']]] = None,
                 view_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Project is a component that create the resources in the Cluster for a set of AWS IAM Users and Roles, managing the access with the integration with AWS IAM.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] admin_user_arns: The list of AWS IAM User arns that can access to this project with 'admin' role.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] edit_user_arns: The list of AWS IAM User arns that can access to this project with 'edit' role.
        :param pulumi.Input[str] kubeconfig: The kubeconfig to access the kubernetes cluster.
        :param pulumi.Input[str] name: The Project name.
        :param pulumi.Input[str] namespace: The Namespace name where the addon will be installed.
        :param pulumi.Input[pulumi.InputType['ProjectResourcesArgsArgs']] resources: The cluster resources to be assigned to the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] view_user_arns: The list of AWS IAM User arns that can access to this project with 'view' role.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Project is a component that create the resources in the Cluster for a set of AWS IAM Users and Roles, managing the access with the integration with AWS IAM.

        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 edit_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kubeconfig: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['ProjectResourcesArgsArgs']]] = None,
                 view_user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            __props__.__dict__["admin_user_arns"] = admin_user_arns
            __props__.__dict__["edit_user_arns"] = edit_user_arns
            if kubeconfig is None and not opts.urn:
                raise TypeError("Missing required property 'kubeconfig'")
            __props__.__dict__["kubeconfig"] = kubeconfig
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["resources"] = resources
            __props__.__dict__["view_user_arns"] = view_user_arns
            __props__.__dict__["admin_role_binding"] = None
            __props__.__dict__["cluster_role"] = None
            __props__.__dict__["cluster_role_binding"] = None
            __props__.__dict__["edit_role_binding"] = None
            __props__.__dict__["provider"] = None
            __props__.__dict__["resource_quota"] = None
            __props__.__dict__["view_role_binding"] = None
        super(Project, __self__).__init__(
            'cloud-toolkit-aws:kubernetes:Project',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="adminRoleBinding")
    def admin_role_binding(self) -> pulumi.Output['pulumi_kubernetes.rbac.v1.RoleBinding']:
        """
        The Kubernetes RoleBinding for admin users.
        """
        return pulumi.get(self, "admin_role_binding")

    @property
    @pulumi.getter(name="clusterRole")
    def cluster_role(self) -> pulumi.Output['pulumi_kubernetes.rbac.v1.ClusterRole']:
        """
        The Kubernetes ClusterRole used to grant minimal access to the cluster.
        """
        return pulumi.get(self, "cluster_role")

    @property
    @pulumi.getter(name="clusterRoleBinding")
    def cluster_role_binding(self) -> pulumi.Output['pulumi_kubernetes.rbac.v1.ClusterRoleBinding']:
        """
        The Kubernetes ClusterRoleBinding to associate the ClusterRole to the project.
        """
        return pulumi.get(self, "cluster_role_binding")

    @property
    @pulumi.getter(name="editRoleBinding")
    def edit_role_binding(self) -> pulumi.Output['pulumi_kubernetes.rbac.v1.RoleBinding']:
        """
        The Kubernetes RoleBinding for edit users.
        """
        return pulumi.get(self, "edit_role_binding")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output['pulumi_kubernetes.core.v1.Namespace']:
        """
        The Namespace used by the project.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Output['pulumi_kubernetes.Provider']:
        """
        The Kubernetes provider used to provision Kubernetes resources.
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="resourceQuota")
    def resource_quota(self) -> pulumi.Output['pulumi_kubernetes.core.v1.ResourceQuota']:
        """
        ResourceQuota for the provisioned Namespace.
        """
        return pulumi.get(self, "resource_quota")

    @property
    @pulumi.getter(name="viewRoleBinding")
    def view_role_binding(self) -> pulumi.Output['pulumi_kubernetes.rbac.v1.RoleBinding']:
        """
        The Kubernetes RoleBinding for view users.
        """
        return pulumi.get(self, "view_role_binding")

