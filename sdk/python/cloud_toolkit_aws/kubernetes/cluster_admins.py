# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
import pulumi_kubernetes

__all__ = ['ClusterAdminsArgs', 'ClusterAdmins']

@pulumi.input_type
class ClusterAdminsArgs:
    def __init__(__self__, *,
                 kubeconfig: pulumi.Input[str],
                 name: pulumi.Input[str],
                 user_arns: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a ClusterAdmins resource.
        :param pulumi.Input[str] kubeconfig: Kubernetes provider used by Pulumi.
        :param pulumi.Input[str] name: The name for the group of Cluster Admins.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_arns: The list of AWS IAM User arns.
        """
        pulumi.set(__self__, "kubeconfig", kubeconfig)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "user_arns", user_arns)

    @property
    @pulumi.getter
    def kubeconfig(self) -> pulumi.Input[str]:
        """
        Kubernetes provider used by Pulumi.
        """
        return pulumi.get(self, "kubeconfig")

    @kubeconfig.setter
    def kubeconfig(self, value: pulumi.Input[str]):
        pulumi.set(self, "kubeconfig", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name for the group of Cluster Admins.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="userArns")
    def user_arns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of AWS IAM User arns.
        """
        return pulumi.get(self, "user_arns")

    @user_arns.setter
    def user_arns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "user_arns", value)


class ClusterAdmins(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kubeconfig: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ClusterAdmins is a component that create the resources in the Cluster for a set of AWS IAM Users and Roles, managing the access with the integration with AWS IAM.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] kubeconfig: Kubernetes provider used by Pulumi.
        :param pulumi.Input[str] name: The name for the group of Cluster Admins.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_arns: The list of AWS IAM User arns.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterAdminsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ClusterAdmins is a component that create the resources in the Cluster for a set of AWS IAM Users and Roles, managing the access with the integration with AWS IAM.

        :param str resource_name: The name of the resource.
        :param ClusterAdminsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterAdminsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 kubeconfig: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterAdminsArgs.__new__(ClusterAdminsArgs)

            if kubeconfig is None and not opts.urn:
                raise TypeError("Missing required property 'kubeconfig'")
            __props__.__dict__["kubeconfig"] = kubeconfig
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if user_arns is None and not opts.urn:
                raise TypeError("Missing required property 'user_arns'")
            __props__.__dict__["user_arns"] = user_arns
            __props__.__dict__["cluster_role_binding"] = None
            __props__.__dict__["provider"] = None
        super(ClusterAdmins, __self__).__init__(
            'cloud-toolkit-aws:kubernetes:ClusterAdmins',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="clusterRoleBinding")
    def cluster_role_binding(self) -> pulumi.Output['pulumi_kubernetes.rbac.v1.ClusterRoleBinding']:
        """
        The Kubernetes ClusterRoleBinding to associate the ClusterRole to the project.
        """
        return pulumi.get(self, "cluster_role_binding")

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Output['pulumi_kubernetes.Provider']:
        """
        The Kubernetes provider used to provision Kubernetes resources.
        """
        return pulumi.get(self, "provider")

