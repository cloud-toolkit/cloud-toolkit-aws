# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
import pulumi_aws

__all__ = [
    'AccountMappingArgs',
    'IamTrustedAccountRoleGroupMapping',
    'IamTrustedAccountRoleGroupPolicyMapping',
    'IamTrustingAccountRoleMapping',
    'IamTrustingAccountRolePolicyAttachmentMapping',
    'OrganizationAccountProviderMapping',
    'OrganizationalUnitMapping',
]

@pulumi.output_type
class AccountMappingArgs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountMappingArgs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountMappingArgs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountMappingArgs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: 'pulumi_aws.organizations.Account',
                 account_name: str):
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "account_name", account_name)

    @property
    @pulumi.getter
    def account(self) -> 'pulumi_aws.organizations.Account':
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")


@pulumi.output_type
class IamTrustedAccountRoleGroupMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IamTrustedAccountRoleGroupMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IamTrustedAccountRoleGroupMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IamTrustedAccountRoleGroupMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group: 'pulumi_aws.iam.Group',
                 role_name: str):
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter
    def group(self) -> 'pulumi_aws.iam.Group':
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        return pulumi.get(self, "role_name")


@pulumi.output_type
class IamTrustedAccountRoleGroupPolicyMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupPolicy":
            suggest = "group_policy"
        elif key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IamTrustedAccountRoleGroupPolicyMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IamTrustedAccountRoleGroupPolicyMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IamTrustedAccountRoleGroupPolicyMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_policy: 'pulumi_aws.iam.GroupPolicy',
                 role_name: str):
        pulumi.set(__self__, "group_policy", group_policy)
        pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="groupPolicy")
    def group_policy(self) -> 'pulumi_aws.iam.GroupPolicy':
        return pulumi.get(self, "group_policy")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        return pulumi.get(self, "role_name")


@pulumi.output_type
class IamTrustingAccountRoleMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IamTrustingAccountRoleMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IamTrustingAccountRoleMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IamTrustingAccountRoleMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: 'pulumi_aws.iam.Role',
                 role_name: str):
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter
    def role(self) -> 'pulumi_aws.iam.Role':
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        return pulumi.get(self, "role_name")


@pulumi.output_type
class IamTrustingAccountRolePolicyAttachmentMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleName":
            suggest = "role_name"
        elif key == "rolePolicyAttachment":
            suggest = "role_policy_attachment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IamTrustingAccountRolePolicyAttachmentMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IamTrustingAccountRolePolicyAttachmentMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IamTrustingAccountRolePolicyAttachmentMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_name: str,
                 role_policy_attachment: Sequence['pulumi_aws.iam.RolePolicyAttachment']):
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "role_policy_attachment", role_policy_attachment)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter(name="rolePolicyAttachment")
    def role_policy_attachment(self) -> Sequence['pulumi_aws.iam.RolePolicyAttachment']:
        return pulumi.get(self, "role_policy_attachment")


@pulumi.output_type
class OrganizationAccountProviderMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationAccountProviderMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationAccountProviderMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationAccountProviderMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: str,
                 provider: 'pulumi_aws.Provider'):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def provider(self) -> 'pulumi_aws.Provider':
        return pulumi.get(self, "provider")


@pulumi.output_type
class OrganizationalUnitMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountName":
            suggest = "account_name"
        elif key == "organizationalUnit":
            suggest = "organizational_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationalUnitMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationalUnitMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationalUnitMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_name: str,
                 organizational_unit: 'pulumi_aws.organizations.OrganizationalUnit'):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "organizational_unit", organizational_unit)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="organizationalUnit")
    def organizational_unit(self) -> 'pulumi_aws.organizations.OrganizationalUnit':
        return pulumi.get(self, "organizational_unit")


