# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._inputs import *

__all__ = ['LandingZoneArgs', 'LandingZone']

@pulumi.input_type
class LandingZoneArgs:
    def __init__(__self__, *,
                 audit: Optional[pulumi.Input['LandingZoneAuditArgsArgs']] = None,
                 iam: Optional[pulumi.Input['LandingZoneIamArgsArgs']] = None,
                 organization: Optional[pulumi.Input['OrganizationArgsArgs']] = None):
        """
        The set of arguments for constructing a LandingZone resource.
        """
        if audit is not None:
            pulumi.set(__self__, "audit", audit)
        if iam is not None:
            pulumi.set(__self__, "iam", iam)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter
    def audit(self) -> Optional[pulumi.Input['LandingZoneAuditArgsArgs']]:
        return pulumi.get(self, "audit")

    @audit.setter
    def audit(self, value: Optional[pulumi.Input['LandingZoneAuditArgsArgs']]):
        pulumi.set(self, "audit", value)

    @property
    @pulumi.getter
    def iam(self) -> Optional[pulumi.Input['LandingZoneIamArgsArgs']]:
        return pulumi.get(self, "iam")

    @iam.setter
    def iam(self, value: Optional[pulumi.Input['LandingZoneIamArgsArgs']]):
        pulumi.set(self, "iam", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input['OrganizationArgsArgs']]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input['OrganizationArgsArgs']]):
        pulumi.set(self, "organization", value)


class LandingZone(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit: Optional[pulumi.Input[pulumi.InputType['LandingZoneAuditArgsArgs']]] = None,
                 iam: Optional[pulumi.Input[pulumi.InputType['LandingZoneIamArgsArgs']]] = None,
                 organization: Optional[pulumi.Input[pulumi.InputType['OrganizationArgsArgs']]] = None,
                 __props__=None):
        """
        Create a Landing Zone with the Organization, the AuditLogging, the AWS Accounts and the

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LandingZoneArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Landing Zone with the Organization, the AuditLogging, the AWS Accounts and the

        :param str resource_name: The name of the resource.
        :param LandingZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LandingZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit: Optional[pulumi.Input[pulumi.InputType['LandingZoneAuditArgsArgs']]] = None,
                 iam: Optional[pulumi.Input[pulumi.InputType['LandingZoneIamArgsArgs']]] = None,
                 organization: Optional[pulumi.Input[pulumi.InputType['OrganizationArgsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LandingZoneArgs.__new__(LandingZoneArgs)

            __props__.__dict__["audit"] = audit
            __props__.__dict__["iam"] = iam
            __props__.__dict__["organization"] = organization
            __props__.__dict__["audit_logging"] = None
        super(LandingZone, __self__).__init__(
            'cloud-toolkit-aws:landingzone:LandingZone',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="auditLogging")
    def audit_logging(self) -> pulumi.Output[Optional[Any]]:
        """
        The AuditLogging component.
        """
        return pulumi.get(self, "audit_logging")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[Any]:
        """
        The Organization components.
        """
        return pulumi.get(self, "organization")

