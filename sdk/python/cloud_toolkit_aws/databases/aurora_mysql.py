# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *
from ._inputs import *
import pulumi_aws
import pulumi_random

__all__ = ['AuroraMysqlArgs', 'AuroraMysql']

@pulumi.input_type
class AuroraMysqlArgs:
    def __init__(__self__, *,
                 backup: Optional[pulumi.Input['AuroraMysqlBackupArgs']] = None,
                 database: Optional[pulumi.Input['AuroraMysqlDatabaseArgs']] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 instances_count: Optional[pulumi.Input[float]] = None,
                 logging: Optional[pulumi.Input['AuroraMysqlLoggingArgs']] = None,
                 monitoring: Optional[pulumi.Input['AuroraMysqlMonitoringArgs']] = None,
                 networking: Optional[pulumi.Input['AuroraMysqlNetworkingArgs']] = None,
                 version: Optional[pulumi.Input['AuroraMysqlVersion']] = None):
        """
        The set of arguments for constructing a AuroraMysql resource.
        :param pulumi.Input['AuroraMysqlBackupArgs'] backup: Backup configuration parameters for Aurora cluster
        :param pulumi.Input['AuroraMysqlDatabaseArgs'] database: Configuration parameters for the database
        :param pulumi.Input[str] instance_type: The instance type for the cluster
        :param pulumi.Input[float] instances_count: The number of instances to be created for Aurora cluster
        :param pulumi.Input['AuroraMysqlLoggingArgs'] logging: Logging configuration parameters for Aurora cluster
        :param pulumi.Input['AuroraMysqlMonitoringArgs'] monitoring: Monitoring configuration parameters for Aurora cluster
        :param pulumi.Input['AuroraMysqlNetworkingArgs'] networking: Networking configuration parameters for Aurora cluster
        :param pulumi.Input['AuroraMysqlVersion'] version: Version for database
        """
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if instances_count is not None:
            pulumi.set(__self__, "instances_count", instances_count)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def backup(self) -> Optional[pulumi.Input['AuroraMysqlBackupArgs']]:
        """
        Backup configuration parameters for Aurora cluster
        """
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[pulumi.Input['AuroraMysqlBackupArgs']]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['AuroraMysqlDatabaseArgs']]:
        """
        Configuration parameters for the database
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['AuroraMysqlDatabaseArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type for the cluster
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="instancesCount")
    def instances_count(self) -> Optional[pulumi.Input[float]]:
        """
        The number of instances to be created for Aurora cluster
        """
        return pulumi.get(self, "instances_count")

    @instances_count.setter
    def instances_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "instances_count", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['AuroraMysqlLoggingArgs']]:
        """
        Logging configuration parameters for Aurora cluster
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['AuroraMysqlLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input['AuroraMysqlMonitoringArgs']]:
        """
        Monitoring configuration parameters for Aurora cluster
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input['AuroraMysqlMonitoringArgs']]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['AuroraMysqlNetworkingArgs']]:
        """
        Networking configuration parameters for Aurora cluster
        """
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['AuroraMysqlNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input['AuroraMysqlVersion']]:
        """
        Version for database
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input['AuroraMysqlVersion']]):
        pulumi.set(self, "version", value)


class AuroraMysql(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlBackupArgs']]] = None,
                 database: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlDatabaseArgs']]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 instances_count: Optional[pulumi.Input[float]] = None,
                 logging: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlLoggingArgs']]] = None,
                 monitoring: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlMonitoringArgs']]] = None,
                 networking: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlNetworkingArgs']]] = None,
                 version: Optional[pulumi.Input['AuroraMysqlVersion']] = None,
                 __props__=None):
        """
        Create a AuroraMysql resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AuroraMysqlBackupArgs']] backup: Backup configuration parameters for Aurora cluster
        :param pulumi.Input[pulumi.InputType['AuroraMysqlDatabaseArgs']] database: Configuration parameters for the database
        :param pulumi.Input[str] instance_type: The instance type for the cluster
        :param pulumi.Input[float] instances_count: The number of instances to be created for Aurora cluster
        :param pulumi.Input[pulumi.InputType['AuroraMysqlLoggingArgs']] logging: Logging configuration parameters for Aurora cluster
        :param pulumi.Input[pulumi.InputType['AuroraMysqlMonitoringArgs']] monitoring: Monitoring configuration parameters for Aurora cluster
        :param pulumi.Input[pulumi.InputType['AuroraMysqlNetworkingArgs']] networking: Networking configuration parameters for Aurora cluster
        :param pulumi.Input['AuroraMysqlVersion'] version: Version for database
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AuroraMysqlArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AuroraMysql resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AuroraMysqlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuroraMysqlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlBackupArgs']]] = None,
                 database: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlDatabaseArgs']]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 instances_count: Optional[pulumi.Input[float]] = None,
                 logging: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlLoggingArgs']]] = None,
                 monitoring: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlMonitoringArgs']]] = None,
                 networking: Optional[pulumi.Input[pulumi.InputType['AuroraMysqlNetworkingArgs']]] = None,
                 version: Optional[pulumi.Input['AuroraMysqlVersion']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuroraMysqlArgs.__new__(AuroraMysqlArgs)

            __props__.__dict__["backup"] = backup
            __props__.__dict__["database"] = database
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["instances_count"] = instances_count
            __props__.__dict__["logging"] = logging
            __props__.__dict__["monitoring"] = monitoring
            __props__.__dict__["networking"] = networking
            __props__.__dict__["version"] = version
            __props__.__dict__["alarms"] = None
            __props__.__dict__["cluster"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["password"] = None
            __props__.__dict__["secret"] = None
            __props__.__dict__["secret_version"] = None
            __props__.__dict__["security_group"] = None
            __props__.__dict__["security_group_rule"] = None
            __props__.__dict__["subnet_group"] = None
            __props__.__dict__["topic"] = None
            __props__.__dict__["topic_subscriptions"] = None
        super(AuroraMysql, __self__).__init__(
            'cloud-toolkit-aws:databases:AuroraMysql',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def alarms(self) -> pulumi.Output[Sequence['pulumi_aws.cloudwatch.MetricAlarm']]:
        """
        CloudWatch alarms that monitor the RDS Cluter
        """
        return pulumi.get(self, "alarms")

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Output['pulumi_aws.rds.Cluster']:
        """
        The RDS Cluster
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['pulumi_aws.rds.ClusterInstance']]:
        """
        Cluster instances associated to the cluster
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output['pulumi_random.RandomPassword']:
        """
        Random password generated for admin user
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output['pulumi_aws.secretsmanager.Secret']:
        """
        Component that protects and stores admin password in AWS
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="secretVersion")
    def secret_version(self) -> pulumi.Output['pulumi_aws.secretsmanager.SecretVersion']:
        """
        Component that protects and stores admin password in AWS
        """
        return pulumi.get(self, "secret_version")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> pulumi.Output['pulumi_aws.ec2.SecurityGroup']:
        """
        The SecurityGroup associated to the cluster to manage traffic
        """
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter(name="securityGroupRule")
    def security_group_rule(self) -> pulumi.Output['pulumi_aws.ec2.SecurityGroupRule']:
        """
        The rules associated SecurityGroup to allow incoming traffic
        """
        return pulumi.get(self, "security_group_rule")

    @property
    @pulumi.getter(name="subnetGroup")
    def subnet_group(self) -> pulumi.Output[Optional['pulumi_aws.rds.SubnetGroup']]:
        """
        The SubnetGroup that reprents the list of subnets where the cluster is deployed
        """
        return pulumi.get(self, "subnet_group")

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Output[Optional['pulumi_aws.sns.Topic']]:
        """
        SNS Topic used for CloudWatch alerts
        """
        return pulumi.get(self, "topic")

    @property
    @pulumi.getter(name="topicSubscriptions")
    def topic_subscriptions(self) -> pulumi.Output[Sequence['pulumi_aws.sns.TopicSubscription']]:
        """
        TopicSubscriptions to alerts by email
        """
        return pulumi.get(self, "topic_subscriptions")

