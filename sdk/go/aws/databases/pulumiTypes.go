// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package databases

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AuroraMysqlType struct {
	// Backup configuration parameters for Aurora cluster
	Backup *AuroraMysqlBackup `pulumi:"backup"`
	// Configuration parameters for the database
	Database *AuroraMysqlDatabase `pulumi:"database"`
	// The instance type for the cluster
	InstanceType *string `pulumi:"instanceType"`
	// The number of instances to be created for Aurora cluster
	InstancesCount *float64 `pulumi:"instancesCount"`
	// Logging configuration parameters for Aurora cluster
	Logging *AuroraMysqlLogging `pulumi:"logging"`
	// Monitoring configuration parameters for Aurora cluster
	Monitoring *AuroraMysqlMonitoring `pulumi:"monitoring"`
	// Networking configuration parameters for Aurora cluster
	Networking *AuroraMysqlNetworking `pulumi:"networking"`
	// Version for database
	Version *string `pulumi:"version"`
}

type AuroraMysqlBackup struct {
	// Time window in which backups should be taken
	PreferredWindow *string `pulumi:"preferredWindow"`
	// Retention days for backups
	RetentionDays *float64 `pulumi:"retentionDays"`
}

// AuroraMysqlBackupInput is an input type that accepts AuroraMysqlBackupArgs and AuroraMysqlBackupOutput values.
// You can construct a concrete instance of `AuroraMysqlBackupInput` via:
//
//	AuroraMysqlBackupArgs{...}
type AuroraMysqlBackupInput interface {
	pulumi.Input

	ToAuroraMysqlBackupOutput() AuroraMysqlBackupOutput
	ToAuroraMysqlBackupOutputWithContext(context.Context) AuroraMysqlBackupOutput
}

type AuroraMysqlBackupArgs struct {
	// Time window in which backups should be taken
	PreferredWindow pulumi.StringPtrInput `pulumi:"preferredWindow"`
	// Retention days for backups
	RetentionDays pulumi.Float64PtrInput `pulumi:"retentionDays"`
}

func (AuroraMysqlBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlBackup)(nil)).Elem()
}

func (i AuroraMysqlBackupArgs) ToAuroraMysqlBackupOutput() AuroraMysqlBackupOutput {
	return i.ToAuroraMysqlBackupOutputWithContext(context.Background())
}

func (i AuroraMysqlBackupArgs) ToAuroraMysqlBackupOutputWithContext(ctx context.Context) AuroraMysqlBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlBackupOutput)
}

func (i AuroraMysqlBackupArgs) ToAuroraMysqlBackupPtrOutput() AuroraMysqlBackupPtrOutput {
	return i.ToAuroraMysqlBackupPtrOutputWithContext(context.Background())
}

func (i AuroraMysqlBackupArgs) ToAuroraMysqlBackupPtrOutputWithContext(ctx context.Context) AuroraMysqlBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlBackupOutput).ToAuroraMysqlBackupPtrOutputWithContext(ctx)
}

// AuroraMysqlBackupPtrInput is an input type that accepts AuroraMysqlBackupArgs, AuroraMysqlBackupPtr and AuroraMysqlBackupPtrOutput values.
// You can construct a concrete instance of `AuroraMysqlBackupPtrInput` via:
//
//	        AuroraMysqlBackupArgs{...}
//
//	or:
//
//	        nil
type AuroraMysqlBackupPtrInput interface {
	pulumi.Input

	ToAuroraMysqlBackupPtrOutput() AuroraMysqlBackupPtrOutput
	ToAuroraMysqlBackupPtrOutputWithContext(context.Context) AuroraMysqlBackupPtrOutput
}

type auroraMysqlBackupPtrType AuroraMysqlBackupArgs

func AuroraMysqlBackupPtr(v *AuroraMysqlBackupArgs) AuroraMysqlBackupPtrInput {
	return (*auroraMysqlBackupPtrType)(v)
}

func (*auroraMysqlBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlBackup)(nil)).Elem()
}

func (i *auroraMysqlBackupPtrType) ToAuroraMysqlBackupPtrOutput() AuroraMysqlBackupPtrOutput {
	return i.ToAuroraMysqlBackupPtrOutputWithContext(context.Background())
}

func (i *auroraMysqlBackupPtrType) ToAuroraMysqlBackupPtrOutputWithContext(ctx context.Context) AuroraMysqlBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlBackupPtrOutput)
}

type AuroraMysqlBackupOutput struct{ *pulumi.OutputState }

func (AuroraMysqlBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlBackup)(nil)).Elem()
}

func (o AuroraMysqlBackupOutput) ToAuroraMysqlBackupOutput() AuroraMysqlBackupOutput {
	return o
}

func (o AuroraMysqlBackupOutput) ToAuroraMysqlBackupOutputWithContext(ctx context.Context) AuroraMysqlBackupOutput {
	return o
}

func (o AuroraMysqlBackupOutput) ToAuroraMysqlBackupPtrOutput() AuroraMysqlBackupPtrOutput {
	return o.ToAuroraMysqlBackupPtrOutputWithContext(context.Background())
}

func (o AuroraMysqlBackupOutput) ToAuroraMysqlBackupPtrOutputWithContext(ctx context.Context) AuroraMysqlBackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuroraMysqlBackup) *AuroraMysqlBackup {
		return &v
	}).(AuroraMysqlBackupPtrOutput)
}

// Time window in which backups should be taken
func (o AuroraMysqlBackupOutput) PreferredWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuroraMysqlBackup) *string { return v.PreferredWindow }).(pulumi.StringPtrOutput)
}

// Retention days for backups
func (o AuroraMysqlBackupOutput) RetentionDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AuroraMysqlBackup) *float64 { return v.RetentionDays }).(pulumi.Float64PtrOutput)
}

type AuroraMysqlBackupPtrOutput struct{ *pulumi.OutputState }

func (AuroraMysqlBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlBackup)(nil)).Elem()
}

func (o AuroraMysqlBackupPtrOutput) ToAuroraMysqlBackupPtrOutput() AuroraMysqlBackupPtrOutput {
	return o
}

func (o AuroraMysqlBackupPtrOutput) ToAuroraMysqlBackupPtrOutputWithContext(ctx context.Context) AuroraMysqlBackupPtrOutput {
	return o
}

func (o AuroraMysqlBackupPtrOutput) Elem() AuroraMysqlBackupOutput {
	return o.ApplyT(func(v *AuroraMysqlBackup) AuroraMysqlBackup {
		if v != nil {
			return *v
		}
		var ret AuroraMysqlBackup
		return ret
	}).(AuroraMysqlBackupOutput)
}

// Time window in which backups should be taken
func (o AuroraMysqlBackupPtrOutput) PreferredWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlBackup) *string {
		if v == nil {
			return nil
		}
		return v.PreferredWindow
	}).(pulumi.StringPtrOutput)
}

// Retention days for backups
func (o AuroraMysqlBackupPtrOutput) RetentionDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AuroraMysqlBackup) *float64 {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.Float64PtrOutput)
}

type AuroraMysqlDatabase struct {
	// The name of the database to create when the DB instance is created
	Name *string `pulumi:"name"`
	// Password length to login in the database
	PasswordLength *float64 `pulumi:"passwordLength"`
	// Username for database admin user
	Username *string `pulumi:"username"`
}

// AuroraMysqlDatabaseInput is an input type that accepts AuroraMysqlDatabaseArgs and AuroraMysqlDatabaseOutput values.
// You can construct a concrete instance of `AuroraMysqlDatabaseInput` via:
//
//	AuroraMysqlDatabaseArgs{...}
type AuroraMysqlDatabaseInput interface {
	pulumi.Input

	ToAuroraMysqlDatabaseOutput() AuroraMysqlDatabaseOutput
	ToAuroraMysqlDatabaseOutputWithContext(context.Context) AuroraMysqlDatabaseOutput
}

type AuroraMysqlDatabaseArgs struct {
	// The name of the database to create when the DB instance is created
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Password length to login in the database
	PasswordLength pulumi.Float64PtrInput `pulumi:"passwordLength"`
	// Username for database admin user
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (AuroraMysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlDatabase)(nil)).Elem()
}

func (i AuroraMysqlDatabaseArgs) ToAuroraMysqlDatabaseOutput() AuroraMysqlDatabaseOutput {
	return i.ToAuroraMysqlDatabaseOutputWithContext(context.Background())
}

func (i AuroraMysqlDatabaseArgs) ToAuroraMysqlDatabaseOutputWithContext(ctx context.Context) AuroraMysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlDatabaseOutput)
}

func (i AuroraMysqlDatabaseArgs) ToAuroraMysqlDatabasePtrOutput() AuroraMysqlDatabasePtrOutput {
	return i.ToAuroraMysqlDatabasePtrOutputWithContext(context.Background())
}

func (i AuroraMysqlDatabaseArgs) ToAuroraMysqlDatabasePtrOutputWithContext(ctx context.Context) AuroraMysqlDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlDatabaseOutput).ToAuroraMysqlDatabasePtrOutputWithContext(ctx)
}

// AuroraMysqlDatabasePtrInput is an input type that accepts AuroraMysqlDatabaseArgs, AuroraMysqlDatabasePtr and AuroraMysqlDatabasePtrOutput values.
// You can construct a concrete instance of `AuroraMysqlDatabasePtrInput` via:
//
//	        AuroraMysqlDatabaseArgs{...}
//
//	or:
//
//	        nil
type AuroraMysqlDatabasePtrInput interface {
	pulumi.Input

	ToAuroraMysqlDatabasePtrOutput() AuroraMysqlDatabasePtrOutput
	ToAuroraMysqlDatabasePtrOutputWithContext(context.Context) AuroraMysqlDatabasePtrOutput
}

type auroraMysqlDatabasePtrType AuroraMysqlDatabaseArgs

func AuroraMysqlDatabasePtr(v *AuroraMysqlDatabaseArgs) AuroraMysqlDatabasePtrInput {
	return (*auroraMysqlDatabasePtrType)(v)
}

func (*auroraMysqlDatabasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlDatabase)(nil)).Elem()
}

func (i *auroraMysqlDatabasePtrType) ToAuroraMysqlDatabasePtrOutput() AuroraMysqlDatabasePtrOutput {
	return i.ToAuroraMysqlDatabasePtrOutputWithContext(context.Background())
}

func (i *auroraMysqlDatabasePtrType) ToAuroraMysqlDatabasePtrOutputWithContext(ctx context.Context) AuroraMysqlDatabasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlDatabasePtrOutput)
}

type AuroraMysqlDatabaseOutput struct{ *pulumi.OutputState }

func (AuroraMysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlDatabase)(nil)).Elem()
}

func (o AuroraMysqlDatabaseOutput) ToAuroraMysqlDatabaseOutput() AuroraMysqlDatabaseOutput {
	return o
}

func (o AuroraMysqlDatabaseOutput) ToAuroraMysqlDatabaseOutputWithContext(ctx context.Context) AuroraMysqlDatabaseOutput {
	return o
}

func (o AuroraMysqlDatabaseOutput) ToAuroraMysqlDatabasePtrOutput() AuroraMysqlDatabasePtrOutput {
	return o.ToAuroraMysqlDatabasePtrOutputWithContext(context.Background())
}

func (o AuroraMysqlDatabaseOutput) ToAuroraMysqlDatabasePtrOutputWithContext(ctx context.Context) AuroraMysqlDatabasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuroraMysqlDatabase) *AuroraMysqlDatabase {
		return &v
	}).(AuroraMysqlDatabasePtrOutput)
}

// The name of the database to create when the DB instance is created
func (o AuroraMysqlDatabaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuroraMysqlDatabase) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Password length to login in the database
func (o AuroraMysqlDatabaseOutput) PasswordLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AuroraMysqlDatabase) *float64 { return v.PasswordLength }).(pulumi.Float64PtrOutput)
}

// Username for database admin user
func (o AuroraMysqlDatabaseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuroraMysqlDatabase) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type AuroraMysqlDatabasePtrOutput struct{ *pulumi.OutputState }

func (AuroraMysqlDatabasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlDatabase)(nil)).Elem()
}

func (o AuroraMysqlDatabasePtrOutput) ToAuroraMysqlDatabasePtrOutput() AuroraMysqlDatabasePtrOutput {
	return o
}

func (o AuroraMysqlDatabasePtrOutput) ToAuroraMysqlDatabasePtrOutputWithContext(ctx context.Context) AuroraMysqlDatabasePtrOutput {
	return o
}

func (o AuroraMysqlDatabasePtrOutput) Elem() AuroraMysqlDatabaseOutput {
	return o.ApplyT(func(v *AuroraMysqlDatabase) AuroraMysqlDatabase {
		if v != nil {
			return *v
		}
		var ret AuroraMysqlDatabase
		return ret
	}).(AuroraMysqlDatabaseOutput)
}

// The name of the database to create when the DB instance is created
func (o AuroraMysqlDatabasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Password length to login in the database
func (o AuroraMysqlDatabasePtrOutput) PasswordLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AuroraMysqlDatabase) *float64 {
		if v == nil {
			return nil
		}
		return v.PasswordLength
	}).(pulumi.Float64PtrOutput)
}

// Username for database admin user
func (o AuroraMysqlDatabasePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlDatabase) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type AuroraMysqlLogging struct {
	// Enable audit logging
	Audit *bool `pulumi:"audit"`
	// Enable error logging
	Error *bool `pulumi:"error"`
	// Enable general logging
	General *bool `pulumi:"general"`
	// Enable slowquery logging
	Slowquery *bool `pulumi:"slowquery"`
}

// AuroraMysqlLoggingInput is an input type that accepts AuroraMysqlLoggingArgs and AuroraMysqlLoggingOutput values.
// You can construct a concrete instance of `AuroraMysqlLoggingInput` via:
//
//	AuroraMysqlLoggingArgs{...}
type AuroraMysqlLoggingInput interface {
	pulumi.Input

	ToAuroraMysqlLoggingOutput() AuroraMysqlLoggingOutput
	ToAuroraMysqlLoggingOutputWithContext(context.Context) AuroraMysqlLoggingOutput
}

type AuroraMysqlLoggingArgs struct {
	// Enable audit logging
	Audit pulumi.BoolPtrInput `pulumi:"audit"`
	// Enable error logging
	Error pulumi.BoolPtrInput `pulumi:"error"`
	// Enable general logging
	General pulumi.BoolPtrInput `pulumi:"general"`
	// Enable slowquery logging
	Slowquery pulumi.BoolPtrInput `pulumi:"slowquery"`
}

func (AuroraMysqlLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlLogging)(nil)).Elem()
}

func (i AuroraMysqlLoggingArgs) ToAuroraMysqlLoggingOutput() AuroraMysqlLoggingOutput {
	return i.ToAuroraMysqlLoggingOutputWithContext(context.Background())
}

func (i AuroraMysqlLoggingArgs) ToAuroraMysqlLoggingOutputWithContext(ctx context.Context) AuroraMysqlLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlLoggingOutput)
}

func (i AuroraMysqlLoggingArgs) ToAuroraMysqlLoggingPtrOutput() AuroraMysqlLoggingPtrOutput {
	return i.ToAuroraMysqlLoggingPtrOutputWithContext(context.Background())
}

func (i AuroraMysqlLoggingArgs) ToAuroraMysqlLoggingPtrOutputWithContext(ctx context.Context) AuroraMysqlLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlLoggingOutput).ToAuroraMysqlLoggingPtrOutputWithContext(ctx)
}

// AuroraMysqlLoggingPtrInput is an input type that accepts AuroraMysqlLoggingArgs, AuroraMysqlLoggingPtr and AuroraMysqlLoggingPtrOutput values.
// You can construct a concrete instance of `AuroraMysqlLoggingPtrInput` via:
//
//	        AuroraMysqlLoggingArgs{...}
//
//	or:
//
//	        nil
type AuroraMysqlLoggingPtrInput interface {
	pulumi.Input

	ToAuroraMysqlLoggingPtrOutput() AuroraMysqlLoggingPtrOutput
	ToAuroraMysqlLoggingPtrOutputWithContext(context.Context) AuroraMysqlLoggingPtrOutput
}

type auroraMysqlLoggingPtrType AuroraMysqlLoggingArgs

func AuroraMysqlLoggingPtr(v *AuroraMysqlLoggingArgs) AuroraMysqlLoggingPtrInput {
	return (*auroraMysqlLoggingPtrType)(v)
}

func (*auroraMysqlLoggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlLogging)(nil)).Elem()
}

func (i *auroraMysqlLoggingPtrType) ToAuroraMysqlLoggingPtrOutput() AuroraMysqlLoggingPtrOutput {
	return i.ToAuroraMysqlLoggingPtrOutputWithContext(context.Background())
}

func (i *auroraMysqlLoggingPtrType) ToAuroraMysqlLoggingPtrOutputWithContext(ctx context.Context) AuroraMysqlLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlLoggingPtrOutput)
}

type AuroraMysqlLoggingOutput struct{ *pulumi.OutputState }

func (AuroraMysqlLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlLogging)(nil)).Elem()
}

func (o AuroraMysqlLoggingOutput) ToAuroraMysqlLoggingOutput() AuroraMysqlLoggingOutput {
	return o
}

func (o AuroraMysqlLoggingOutput) ToAuroraMysqlLoggingOutputWithContext(ctx context.Context) AuroraMysqlLoggingOutput {
	return o
}

func (o AuroraMysqlLoggingOutput) ToAuroraMysqlLoggingPtrOutput() AuroraMysqlLoggingPtrOutput {
	return o.ToAuroraMysqlLoggingPtrOutputWithContext(context.Background())
}

func (o AuroraMysqlLoggingOutput) ToAuroraMysqlLoggingPtrOutputWithContext(ctx context.Context) AuroraMysqlLoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuroraMysqlLogging) *AuroraMysqlLogging {
		return &v
	}).(AuroraMysqlLoggingPtrOutput)
}

// Enable audit logging
func (o AuroraMysqlLoggingOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuroraMysqlLogging) *bool { return v.Audit }).(pulumi.BoolPtrOutput)
}

// Enable error logging
func (o AuroraMysqlLoggingOutput) Error() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuroraMysqlLogging) *bool { return v.Error }).(pulumi.BoolPtrOutput)
}

// Enable general logging
func (o AuroraMysqlLoggingOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuroraMysqlLogging) *bool { return v.General }).(pulumi.BoolPtrOutput)
}

// Enable slowquery logging
func (o AuroraMysqlLoggingOutput) Slowquery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuroraMysqlLogging) *bool { return v.Slowquery }).(pulumi.BoolPtrOutput)
}

type AuroraMysqlLoggingPtrOutput struct{ *pulumi.OutputState }

func (AuroraMysqlLoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlLogging)(nil)).Elem()
}

func (o AuroraMysqlLoggingPtrOutput) ToAuroraMysqlLoggingPtrOutput() AuroraMysqlLoggingPtrOutput {
	return o
}

func (o AuroraMysqlLoggingPtrOutput) ToAuroraMysqlLoggingPtrOutputWithContext(ctx context.Context) AuroraMysqlLoggingPtrOutput {
	return o
}

func (o AuroraMysqlLoggingPtrOutput) Elem() AuroraMysqlLoggingOutput {
	return o.ApplyT(func(v *AuroraMysqlLogging) AuroraMysqlLogging {
		if v != nil {
			return *v
		}
		var ret AuroraMysqlLogging
		return ret
	}).(AuroraMysqlLoggingOutput)
}

// Enable audit logging
func (o AuroraMysqlLoggingPtrOutput) Audit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlLogging) *bool {
		if v == nil {
			return nil
		}
		return v.Audit
	}).(pulumi.BoolPtrOutput)
}

// Enable error logging
func (o AuroraMysqlLoggingPtrOutput) Error() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlLogging) *bool {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.BoolPtrOutput)
}

// Enable general logging
func (o AuroraMysqlLoggingPtrOutput) General() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlLogging) *bool {
		if v == nil {
			return nil
		}
		return v.General
	}).(pulumi.BoolPtrOutput)
}

// Enable slowquery logging
func (o AuroraMysqlLoggingPtrOutput) Slowquery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlLogging) *bool {
		if v == nil {
			return nil
		}
		return v.Slowquery
	}).(pulumi.BoolPtrOutput)
}

type AuroraMysqlMonitoring struct {
	// Emails that will receive the alerts
	Emails []string `pulumi:"emails"`
	// Enable cluster alerting with CloudWatch
	Enabled *bool `pulumi:"enabled"`
}

// AuroraMysqlMonitoringInput is an input type that accepts AuroraMysqlMonitoringArgs and AuroraMysqlMonitoringOutput values.
// You can construct a concrete instance of `AuroraMysqlMonitoringInput` via:
//
//	AuroraMysqlMonitoringArgs{...}
type AuroraMysqlMonitoringInput interface {
	pulumi.Input

	ToAuroraMysqlMonitoringOutput() AuroraMysqlMonitoringOutput
	ToAuroraMysqlMonitoringOutputWithContext(context.Context) AuroraMysqlMonitoringOutput
}

type AuroraMysqlMonitoringArgs struct {
	// Emails that will receive the alerts
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// Enable cluster alerting with CloudWatch
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AuroraMysqlMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlMonitoring)(nil)).Elem()
}

func (i AuroraMysqlMonitoringArgs) ToAuroraMysqlMonitoringOutput() AuroraMysqlMonitoringOutput {
	return i.ToAuroraMysqlMonitoringOutputWithContext(context.Background())
}

func (i AuroraMysqlMonitoringArgs) ToAuroraMysqlMonitoringOutputWithContext(ctx context.Context) AuroraMysqlMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlMonitoringOutput)
}

func (i AuroraMysqlMonitoringArgs) ToAuroraMysqlMonitoringPtrOutput() AuroraMysqlMonitoringPtrOutput {
	return i.ToAuroraMysqlMonitoringPtrOutputWithContext(context.Background())
}

func (i AuroraMysqlMonitoringArgs) ToAuroraMysqlMonitoringPtrOutputWithContext(ctx context.Context) AuroraMysqlMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlMonitoringOutput).ToAuroraMysqlMonitoringPtrOutputWithContext(ctx)
}

// AuroraMysqlMonitoringPtrInput is an input type that accepts AuroraMysqlMonitoringArgs, AuroraMysqlMonitoringPtr and AuroraMysqlMonitoringPtrOutput values.
// You can construct a concrete instance of `AuroraMysqlMonitoringPtrInput` via:
//
//	        AuroraMysqlMonitoringArgs{...}
//
//	or:
//
//	        nil
type AuroraMysqlMonitoringPtrInput interface {
	pulumi.Input

	ToAuroraMysqlMonitoringPtrOutput() AuroraMysqlMonitoringPtrOutput
	ToAuroraMysqlMonitoringPtrOutputWithContext(context.Context) AuroraMysqlMonitoringPtrOutput
}

type auroraMysqlMonitoringPtrType AuroraMysqlMonitoringArgs

func AuroraMysqlMonitoringPtr(v *AuroraMysqlMonitoringArgs) AuroraMysqlMonitoringPtrInput {
	return (*auroraMysqlMonitoringPtrType)(v)
}

func (*auroraMysqlMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlMonitoring)(nil)).Elem()
}

func (i *auroraMysqlMonitoringPtrType) ToAuroraMysqlMonitoringPtrOutput() AuroraMysqlMonitoringPtrOutput {
	return i.ToAuroraMysqlMonitoringPtrOutputWithContext(context.Background())
}

func (i *auroraMysqlMonitoringPtrType) ToAuroraMysqlMonitoringPtrOutputWithContext(ctx context.Context) AuroraMysqlMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlMonitoringPtrOutput)
}

type AuroraMysqlMonitoringOutput struct{ *pulumi.OutputState }

func (AuroraMysqlMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlMonitoring)(nil)).Elem()
}

func (o AuroraMysqlMonitoringOutput) ToAuroraMysqlMonitoringOutput() AuroraMysqlMonitoringOutput {
	return o
}

func (o AuroraMysqlMonitoringOutput) ToAuroraMysqlMonitoringOutputWithContext(ctx context.Context) AuroraMysqlMonitoringOutput {
	return o
}

func (o AuroraMysqlMonitoringOutput) ToAuroraMysqlMonitoringPtrOutput() AuroraMysqlMonitoringPtrOutput {
	return o.ToAuroraMysqlMonitoringPtrOutputWithContext(context.Background())
}

func (o AuroraMysqlMonitoringOutput) ToAuroraMysqlMonitoringPtrOutputWithContext(ctx context.Context) AuroraMysqlMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuroraMysqlMonitoring) *AuroraMysqlMonitoring {
		return &v
	}).(AuroraMysqlMonitoringPtrOutput)
}

// Emails that will receive the alerts
func (o AuroraMysqlMonitoringOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuroraMysqlMonitoring) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// Enable cluster alerting with CloudWatch
func (o AuroraMysqlMonitoringOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuroraMysqlMonitoring) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AuroraMysqlMonitoringPtrOutput struct{ *pulumi.OutputState }

func (AuroraMysqlMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlMonitoring)(nil)).Elem()
}

func (o AuroraMysqlMonitoringPtrOutput) ToAuroraMysqlMonitoringPtrOutput() AuroraMysqlMonitoringPtrOutput {
	return o
}

func (o AuroraMysqlMonitoringPtrOutput) ToAuroraMysqlMonitoringPtrOutputWithContext(ctx context.Context) AuroraMysqlMonitoringPtrOutput {
	return o
}

func (o AuroraMysqlMonitoringPtrOutput) Elem() AuroraMysqlMonitoringOutput {
	return o.ApplyT(func(v *AuroraMysqlMonitoring) AuroraMysqlMonitoring {
		if v != nil {
			return *v
		}
		var ret AuroraMysqlMonitoring
		return ret
	}).(AuroraMysqlMonitoringOutput)
}

// Emails that will receive the alerts
func (o AuroraMysqlMonitoringPtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuroraMysqlMonitoring) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// Enable cluster alerting with CloudWatch
func (o AuroraMysqlMonitoringPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlMonitoring) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type AuroraMysqlNetworking struct {
	// Allow traffic from Internet
	AllowInternet *bool `pulumi:"allowInternet"`
	// Allowed CIDRs that connect to the cluster
	AllowedCidr []string `pulumi:"allowedCidr"`
	// Subnets belonging to a Virtual Private Cloud where cluster must be deployed
	SubnetIds []string `pulumi:"subnetIds"`
	// Virtual Private Cloud where instances must be deployed
	Vpc *string `pulumi:"vpc"`
}

// AuroraMysqlNetworkingInput is an input type that accepts AuroraMysqlNetworkingArgs and AuroraMysqlNetworkingOutput values.
// You can construct a concrete instance of `AuroraMysqlNetworkingInput` via:
//
//	AuroraMysqlNetworkingArgs{...}
type AuroraMysqlNetworkingInput interface {
	pulumi.Input

	ToAuroraMysqlNetworkingOutput() AuroraMysqlNetworkingOutput
	ToAuroraMysqlNetworkingOutputWithContext(context.Context) AuroraMysqlNetworkingOutput
}

type AuroraMysqlNetworkingArgs struct {
	// Allow traffic from Internet
	AllowInternet pulumi.BoolPtrInput `pulumi:"allowInternet"`
	// Allowed CIDRs that connect to the cluster
	AllowedCidr pulumi.StringArrayInput `pulumi:"allowedCidr"`
	// Subnets belonging to a Virtual Private Cloud where cluster must be deployed
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// Virtual Private Cloud where instances must be deployed
	Vpc pulumi.StringPtrInput `pulumi:"vpc"`
}

func (AuroraMysqlNetworkingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlNetworking)(nil)).Elem()
}

func (i AuroraMysqlNetworkingArgs) ToAuroraMysqlNetworkingOutput() AuroraMysqlNetworkingOutput {
	return i.ToAuroraMysqlNetworkingOutputWithContext(context.Background())
}

func (i AuroraMysqlNetworkingArgs) ToAuroraMysqlNetworkingOutputWithContext(ctx context.Context) AuroraMysqlNetworkingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlNetworkingOutput)
}

func (i AuroraMysqlNetworkingArgs) ToAuroraMysqlNetworkingPtrOutput() AuroraMysqlNetworkingPtrOutput {
	return i.ToAuroraMysqlNetworkingPtrOutputWithContext(context.Background())
}

func (i AuroraMysqlNetworkingArgs) ToAuroraMysqlNetworkingPtrOutputWithContext(ctx context.Context) AuroraMysqlNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlNetworkingOutput).ToAuroraMysqlNetworkingPtrOutputWithContext(ctx)
}

// AuroraMysqlNetworkingPtrInput is an input type that accepts AuroraMysqlNetworkingArgs, AuroraMysqlNetworkingPtr and AuroraMysqlNetworkingPtrOutput values.
// You can construct a concrete instance of `AuroraMysqlNetworkingPtrInput` via:
//
//	        AuroraMysqlNetworkingArgs{...}
//
//	or:
//
//	        nil
type AuroraMysqlNetworkingPtrInput interface {
	pulumi.Input

	ToAuroraMysqlNetworkingPtrOutput() AuroraMysqlNetworkingPtrOutput
	ToAuroraMysqlNetworkingPtrOutputWithContext(context.Context) AuroraMysqlNetworkingPtrOutput
}

type auroraMysqlNetworkingPtrType AuroraMysqlNetworkingArgs

func AuroraMysqlNetworkingPtr(v *AuroraMysqlNetworkingArgs) AuroraMysqlNetworkingPtrInput {
	return (*auroraMysqlNetworkingPtrType)(v)
}

func (*auroraMysqlNetworkingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlNetworking)(nil)).Elem()
}

func (i *auroraMysqlNetworkingPtrType) ToAuroraMysqlNetworkingPtrOutput() AuroraMysqlNetworkingPtrOutput {
	return i.ToAuroraMysqlNetworkingPtrOutputWithContext(context.Background())
}

func (i *auroraMysqlNetworkingPtrType) ToAuroraMysqlNetworkingPtrOutputWithContext(ctx context.Context) AuroraMysqlNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuroraMysqlNetworkingPtrOutput)
}

type AuroraMysqlNetworkingOutput struct{ *pulumi.OutputState }

func (AuroraMysqlNetworkingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuroraMysqlNetworking)(nil)).Elem()
}

func (o AuroraMysqlNetworkingOutput) ToAuroraMysqlNetworkingOutput() AuroraMysqlNetworkingOutput {
	return o
}

func (o AuroraMysqlNetworkingOutput) ToAuroraMysqlNetworkingOutputWithContext(ctx context.Context) AuroraMysqlNetworkingOutput {
	return o
}

func (o AuroraMysqlNetworkingOutput) ToAuroraMysqlNetworkingPtrOutput() AuroraMysqlNetworkingPtrOutput {
	return o.ToAuroraMysqlNetworkingPtrOutputWithContext(context.Background())
}

func (o AuroraMysqlNetworkingOutput) ToAuroraMysqlNetworkingPtrOutputWithContext(ctx context.Context) AuroraMysqlNetworkingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuroraMysqlNetworking) *AuroraMysqlNetworking {
		return &v
	}).(AuroraMysqlNetworkingPtrOutput)
}

// Allow traffic from Internet
func (o AuroraMysqlNetworkingOutput) AllowInternet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AuroraMysqlNetworking) *bool { return v.AllowInternet }).(pulumi.BoolPtrOutput)
}

// Allowed CIDRs that connect to the cluster
func (o AuroraMysqlNetworkingOutput) AllowedCidr() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuroraMysqlNetworking) []string { return v.AllowedCidr }).(pulumi.StringArrayOutput)
}

// Subnets belonging to a Virtual Private Cloud where cluster must be deployed
func (o AuroraMysqlNetworkingOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuroraMysqlNetworking) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Virtual Private Cloud where instances must be deployed
func (o AuroraMysqlNetworkingOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuroraMysqlNetworking) *string { return v.Vpc }).(pulumi.StringPtrOutput)
}

type AuroraMysqlNetworkingPtrOutput struct{ *pulumi.OutputState }

func (AuroraMysqlNetworkingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuroraMysqlNetworking)(nil)).Elem()
}

func (o AuroraMysqlNetworkingPtrOutput) ToAuroraMysqlNetworkingPtrOutput() AuroraMysqlNetworkingPtrOutput {
	return o
}

func (o AuroraMysqlNetworkingPtrOutput) ToAuroraMysqlNetworkingPtrOutputWithContext(ctx context.Context) AuroraMysqlNetworkingPtrOutput {
	return o
}

func (o AuroraMysqlNetworkingPtrOutput) Elem() AuroraMysqlNetworkingOutput {
	return o.ApplyT(func(v *AuroraMysqlNetworking) AuroraMysqlNetworking {
		if v != nil {
			return *v
		}
		var ret AuroraMysqlNetworking
		return ret
	}).(AuroraMysqlNetworkingOutput)
}

// Allow traffic from Internet
func (o AuroraMysqlNetworkingPtrOutput) AllowInternet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlNetworking) *bool {
		if v == nil {
			return nil
		}
		return v.AllowInternet
	}).(pulumi.BoolPtrOutput)
}

// Allowed CIDRs that connect to the cluster
func (o AuroraMysqlNetworkingPtrOutput) AllowedCidr() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuroraMysqlNetworking) []string {
		if v == nil {
			return nil
		}
		return v.AllowedCidr
	}).(pulumi.StringArrayOutput)
}

// Subnets belonging to a Virtual Private Cloud where cluster must be deployed
func (o AuroraMysqlNetworkingPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AuroraMysqlNetworking) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// Virtual Private Cloud where instances must be deployed
func (o AuroraMysqlNetworkingPtrOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuroraMysqlNetworking) *string {
		if v == nil {
			return nil
		}
		return v.Vpc
	}).(pulumi.StringPtrOutput)
}

type MysqlType struct {
	// Backup configuration parameters for the database instance
	Backup *MysqlBackup `pulumi:"backup"`
	// Configuration parameters for the database instance
	Database MysqlDatabase `pulumi:"database"`
	// Instance type to run the database instance
	Instance *string `pulumi:"instance"`
	// Network configuration parameters for the database instance
	Networking *MysqlNetworking `pulumi:"networking"`
	// Storage configuration parameters for the database instance
	Storage *MysqlStorage `pulumi:"storage"`
	// Version for database instance
	Version MysqlVersion `pulumi:"version"`
}

type MysqlBackup struct {
	// Time window in which backups should be taken
	PreferredWindow *string `pulumi:"preferredWindow"`
	// Retention days for backups
	RetentionDays *float64 `pulumi:"retentionDays"`
}

// MysqlBackupInput is an input type that accepts MysqlBackupArgs and MysqlBackupOutput values.
// You can construct a concrete instance of `MysqlBackupInput` via:
//
//	MysqlBackupArgs{...}
type MysqlBackupInput interface {
	pulumi.Input

	ToMysqlBackupOutput() MysqlBackupOutput
	ToMysqlBackupOutputWithContext(context.Context) MysqlBackupOutput
}

type MysqlBackupArgs struct {
	// Time window in which backups should be taken
	PreferredWindow pulumi.StringPtrInput `pulumi:"preferredWindow"`
	// Retention days for backups
	RetentionDays pulumi.Float64PtrInput `pulumi:"retentionDays"`
}

func (MysqlBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackup)(nil)).Elem()
}

func (i MysqlBackupArgs) ToMysqlBackupOutput() MysqlBackupOutput {
	return i.ToMysqlBackupOutputWithContext(context.Background())
}

func (i MysqlBackupArgs) ToMysqlBackupOutputWithContext(ctx context.Context) MysqlBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupOutput)
}

func (i MysqlBackupArgs) ToMysqlBackupPtrOutput() MysqlBackupPtrOutput {
	return i.ToMysqlBackupPtrOutputWithContext(context.Background())
}

func (i MysqlBackupArgs) ToMysqlBackupPtrOutputWithContext(ctx context.Context) MysqlBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupOutput).ToMysqlBackupPtrOutputWithContext(ctx)
}

// MysqlBackupPtrInput is an input type that accepts MysqlBackupArgs, MysqlBackupPtr and MysqlBackupPtrOutput values.
// You can construct a concrete instance of `MysqlBackupPtrInput` via:
//
//	        MysqlBackupArgs{...}
//
//	or:
//
//	        nil
type MysqlBackupPtrInput interface {
	pulumi.Input

	ToMysqlBackupPtrOutput() MysqlBackupPtrOutput
	ToMysqlBackupPtrOutputWithContext(context.Context) MysqlBackupPtrOutput
}

type mysqlBackupPtrType MysqlBackupArgs

func MysqlBackupPtr(v *MysqlBackupArgs) MysqlBackupPtrInput {
	return (*mysqlBackupPtrType)(v)
}

func (*mysqlBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackup)(nil)).Elem()
}

func (i *mysqlBackupPtrType) ToMysqlBackupPtrOutput() MysqlBackupPtrOutput {
	return i.ToMysqlBackupPtrOutputWithContext(context.Background())
}

func (i *mysqlBackupPtrType) ToMysqlBackupPtrOutputWithContext(ctx context.Context) MysqlBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBackupPtrOutput)
}

type MysqlBackupOutput struct{ *pulumi.OutputState }

func (MysqlBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlBackup)(nil)).Elem()
}

func (o MysqlBackupOutput) ToMysqlBackupOutput() MysqlBackupOutput {
	return o
}

func (o MysqlBackupOutput) ToMysqlBackupOutputWithContext(ctx context.Context) MysqlBackupOutput {
	return o
}

func (o MysqlBackupOutput) ToMysqlBackupPtrOutput() MysqlBackupPtrOutput {
	return o.ToMysqlBackupPtrOutputWithContext(context.Background())
}

func (o MysqlBackupOutput) ToMysqlBackupPtrOutputWithContext(ctx context.Context) MysqlBackupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlBackup) *MysqlBackup {
		return &v
	}).(MysqlBackupPtrOutput)
}

// Time window in which backups should be taken
func (o MysqlBackupOutput) PreferredWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlBackup) *string { return v.PreferredWindow }).(pulumi.StringPtrOutput)
}

// Retention days for backups
func (o MysqlBackupOutput) RetentionDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MysqlBackup) *float64 { return v.RetentionDays }).(pulumi.Float64PtrOutput)
}

type MysqlBackupPtrOutput struct{ *pulumi.OutputState }

func (MysqlBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBackup)(nil)).Elem()
}

func (o MysqlBackupPtrOutput) ToMysqlBackupPtrOutput() MysqlBackupPtrOutput {
	return o
}

func (o MysqlBackupPtrOutput) ToMysqlBackupPtrOutputWithContext(ctx context.Context) MysqlBackupPtrOutput {
	return o
}

func (o MysqlBackupPtrOutput) Elem() MysqlBackupOutput {
	return o.ApplyT(func(v *MysqlBackup) MysqlBackup {
		if v != nil {
			return *v
		}
		var ret MysqlBackup
		return ret
	}).(MysqlBackupOutput)
}

// Time window in which backups should be taken
func (o MysqlBackupPtrOutput) PreferredWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlBackup) *string {
		if v == nil {
			return nil
		}
		return v.PreferredWindow
	}).(pulumi.StringPtrOutput)
}

// Retention days for backups
func (o MysqlBackupPtrOutput) RetentionDays() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MysqlBackup) *float64 {
		if v == nil {
			return nil
		}
		return v.RetentionDays
	}).(pulumi.Float64PtrOutput)
}

type MysqlDatabase struct {
	// The name of the database to create when the DB instance is created
	Name string `pulumi:"name"`
	// Password length to login in the database instance
	PasswordLength *float64 `pulumi:"passwordLength"`
	// Username for database admin user
	Username string `pulumi:"username"`
}

// MysqlDatabaseInput is an input type that accepts MysqlDatabaseArgs and MysqlDatabaseOutput values.
// You can construct a concrete instance of `MysqlDatabaseInput` via:
//
//	MysqlDatabaseArgs{...}
type MysqlDatabaseInput interface {
	pulumi.Input

	ToMysqlDatabaseOutput() MysqlDatabaseOutput
	ToMysqlDatabaseOutputWithContext(context.Context) MysqlDatabaseOutput
}

type MysqlDatabaseArgs struct {
	// The name of the database to create when the DB instance is created
	Name pulumi.StringInput `pulumi:"name"`
	// Password length to login in the database instance
	PasswordLength pulumi.Float64PtrInput `pulumi:"passwordLength"`
	// Username for database admin user
	Username pulumi.StringInput `pulumi:"username"`
}

func (MysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabase)(nil)).Elem()
}

func (i MysqlDatabaseArgs) ToMysqlDatabaseOutput() MysqlDatabaseOutput {
	return i.ToMysqlDatabaseOutputWithContext(context.Background())
}

func (i MysqlDatabaseArgs) ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseOutput)
}

type MysqlDatabaseOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabase)(nil)).Elem()
}

func (o MysqlDatabaseOutput) ToMysqlDatabaseOutput() MysqlDatabaseOutput {
	return o
}

func (o MysqlDatabaseOutput) ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput {
	return o
}

// The name of the database to create when the DB instance is created
func (o MysqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlDatabase) string { return v.Name }).(pulumi.StringOutput)
}

// Password length to login in the database instance
func (o MysqlDatabaseOutput) PasswordLength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MysqlDatabase) *float64 { return v.PasswordLength }).(pulumi.Float64PtrOutput)
}

// Username for database admin user
func (o MysqlDatabaseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlDatabase) string { return v.Username }).(pulumi.StringOutput)
}

type MysqlNetworking struct {
	// Allowed CIDRs that connect to the database instance
	AllowedCidr []string `pulumi:"allowedCidr"`
	// Subnets belonging to a Virtual Private Cloud where database instance must be deployed
	SubnetIds []string `pulumi:"subnetIds"`
	// Virtual Private Cloud where database instance must be deployed
	Vpc *string `pulumi:"vpc"`
}

// MysqlNetworkingInput is an input type that accepts MysqlNetworkingArgs and MysqlNetworkingOutput values.
// You can construct a concrete instance of `MysqlNetworkingInput` via:
//
//	MysqlNetworkingArgs{...}
type MysqlNetworkingInput interface {
	pulumi.Input

	ToMysqlNetworkingOutput() MysqlNetworkingOutput
	ToMysqlNetworkingOutputWithContext(context.Context) MysqlNetworkingOutput
}

type MysqlNetworkingArgs struct {
	// Allowed CIDRs that connect to the database instance
	AllowedCidr pulumi.StringArrayInput `pulumi:"allowedCidr"`
	// Subnets belonging to a Virtual Private Cloud where database instance must be deployed
	SubnetIds pulumi.StringArrayInput `pulumi:"subnetIds"`
	// Virtual Private Cloud where database instance must be deployed
	Vpc pulumi.StringPtrInput `pulumi:"vpc"`
}

func (MysqlNetworkingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlNetworking)(nil)).Elem()
}

func (i MysqlNetworkingArgs) ToMysqlNetworkingOutput() MysqlNetworkingOutput {
	return i.ToMysqlNetworkingOutputWithContext(context.Background())
}

func (i MysqlNetworkingArgs) ToMysqlNetworkingOutputWithContext(ctx context.Context) MysqlNetworkingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlNetworkingOutput)
}

func (i MysqlNetworkingArgs) ToMysqlNetworkingPtrOutput() MysqlNetworkingPtrOutput {
	return i.ToMysqlNetworkingPtrOutputWithContext(context.Background())
}

func (i MysqlNetworkingArgs) ToMysqlNetworkingPtrOutputWithContext(ctx context.Context) MysqlNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlNetworkingOutput).ToMysqlNetworkingPtrOutputWithContext(ctx)
}

// MysqlNetworkingPtrInput is an input type that accepts MysqlNetworkingArgs, MysqlNetworkingPtr and MysqlNetworkingPtrOutput values.
// You can construct a concrete instance of `MysqlNetworkingPtrInput` via:
//
//	        MysqlNetworkingArgs{...}
//
//	or:
//
//	        nil
type MysqlNetworkingPtrInput interface {
	pulumi.Input

	ToMysqlNetworkingPtrOutput() MysqlNetworkingPtrOutput
	ToMysqlNetworkingPtrOutputWithContext(context.Context) MysqlNetworkingPtrOutput
}

type mysqlNetworkingPtrType MysqlNetworkingArgs

func MysqlNetworkingPtr(v *MysqlNetworkingArgs) MysqlNetworkingPtrInput {
	return (*mysqlNetworkingPtrType)(v)
}

func (*mysqlNetworkingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlNetworking)(nil)).Elem()
}

func (i *mysqlNetworkingPtrType) ToMysqlNetworkingPtrOutput() MysqlNetworkingPtrOutput {
	return i.ToMysqlNetworkingPtrOutputWithContext(context.Background())
}

func (i *mysqlNetworkingPtrType) ToMysqlNetworkingPtrOutputWithContext(ctx context.Context) MysqlNetworkingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlNetworkingPtrOutput)
}

type MysqlNetworkingOutput struct{ *pulumi.OutputState }

func (MysqlNetworkingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlNetworking)(nil)).Elem()
}

func (o MysqlNetworkingOutput) ToMysqlNetworkingOutput() MysqlNetworkingOutput {
	return o
}

func (o MysqlNetworkingOutput) ToMysqlNetworkingOutputWithContext(ctx context.Context) MysqlNetworkingOutput {
	return o
}

func (o MysqlNetworkingOutput) ToMysqlNetworkingPtrOutput() MysqlNetworkingPtrOutput {
	return o.ToMysqlNetworkingPtrOutputWithContext(context.Background())
}

func (o MysqlNetworkingOutput) ToMysqlNetworkingPtrOutputWithContext(ctx context.Context) MysqlNetworkingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlNetworking) *MysqlNetworking {
		return &v
	}).(MysqlNetworkingPtrOutput)
}

// Allowed CIDRs that connect to the database instance
func (o MysqlNetworkingOutput) AllowedCidr() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MysqlNetworking) []string { return v.AllowedCidr }).(pulumi.StringArrayOutput)
}

// Subnets belonging to a Virtual Private Cloud where database instance must be deployed
func (o MysqlNetworkingOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MysqlNetworking) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Virtual Private Cloud where database instance must be deployed
func (o MysqlNetworkingOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlNetworking) *string { return v.Vpc }).(pulumi.StringPtrOutput)
}

type MysqlNetworkingPtrOutput struct{ *pulumi.OutputState }

func (MysqlNetworkingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlNetworking)(nil)).Elem()
}

func (o MysqlNetworkingPtrOutput) ToMysqlNetworkingPtrOutput() MysqlNetworkingPtrOutput {
	return o
}

func (o MysqlNetworkingPtrOutput) ToMysqlNetworkingPtrOutputWithContext(ctx context.Context) MysqlNetworkingPtrOutput {
	return o
}

func (o MysqlNetworkingPtrOutput) Elem() MysqlNetworkingOutput {
	return o.ApplyT(func(v *MysqlNetworking) MysqlNetworking {
		if v != nil {
			return *v
		}
		var ret MysqlNetworking
		return ret
	}).(MysqlNetworkingOutput)
}

// Allowed CIDRs that connect to the database instance
func (o MysqlNetworkingPtrOutput) AllowedCidr() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MysqlNetworking) []string {
		if v == nil {
			return nil
		}
		return v.AllowedCidr
	}).(pulumi.StringArrayOutput)
}

// Subnets belonging to a Virtual Private Cloud where database instance must be deployed
func (o MysqlNetworkingPtrOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MysqlNetworking) []string {
		if v == nil {
			return nil
		}
		return v.SubnetIds
	}).(pulumi.StringArrayOutput)
}

// Virtual Private Cloud where database instance must be deployed
func (o MysqlNetworkingPtrOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlNetworking) *string {
		if v == nil {
			return nil
		}
		return v.Vpc
	}).(pulumi.StringPtrOutput)
}

type MysqlStorage struct {
	// Storage size allocated for database instance
	Size *float64 `pulumi:"size"`
	// Storage type class for database instance
	Type *MysqlStorageType `pulumi:"type"`
}

// MysqlStorageInput is an input type that accepts MysqlStorageArgs and MysqlStorageOutput values.
// You can construct a concrete instance of `MysqlStorageInput` via:
//
//	MysqlStorageArgs{...}
type MysqlStorageInput interface {
	pulumi.Input

	ToMysqlStorageOutput() MysqlStorageOutput
	ToMysqlStorageOutputWithContext(context.Context) MysqlStorageOutput
}

type MysqlStorageArgs struct {
	// Storage size allocated for database instance
	Size pulumi.Float64PtrInput `pulumi:"size"`
	// Storage type class for database instance
	Type MysqlStorageTypePtrInput `pulumi:"type"`
}

func (MysqlStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlStorage)(nil)).Elem()
}

func (i MysqlStorageArgs) ToMysqlStorageOutput() MysqlStorageOutput {
	return i.ToMysqlStorageOutputWithContext(context.Background())
}

func (i MysqlStorageArgs) ToMysqlStorageOutputWithContext(ctx context.Context) MysqlStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlStorageOutput)
}

func (i MysqlStorageArgs) ToMysqlStoragePtrOutput() MysqlStoragePtrOutput {
	return i.ToMysqlStoragePtrOutputWithContext(context.Background())
}

func (i MysqlStorageArgs) ToMysqlStoragePtrOutputWithContext(ctx context.Context) MysqlStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlStorageOutput).ToMysqlStoragePtrOutputWithContext(ctx)
}

// MysqlStoragePtrInput is an input type that accepts MysqlStorageArgs, MysqlStoragePtr and MysqlStoragePtrOutput values.
// You can construct a concrete instance of `MysqlStoragePtrInput` via:
//
//	        MysqlStorageArgs{...}
//
//	or:
//
//	        nil
type MysqlStoragePtrInput interface {
	pulumi.Input

	ToMysqlStoragePtrOutput() MysqlStoragePtrOutput
	ToMysqlStoragePtrOutputWithContext(context.Context) MysqlStoragePtrOutput
}

type mysqlStoragePtrType MysqlStorageArgs

func MysqlStoragePtr(v *MysqlStorageArgs) MysqlStoragePtrInput {
	return (*mysqlStoragePtrType)(v)
}

func (*mysqlStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlStorage)(nil)).Elem()
}

func (i *mysqlStoragePtrType) ToMysqlStoragePtrOutput() MysqlStoragePtrOutput {
	return i.ToMysqlStoragePtrOutputWithContext(context.Background())
}

func (i *mysqlStoragePtrType) ToMysqlStoragePtrOutputWithContext(ctx context.Context) MysqlStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlStoragePtrOutput)
}

type MysqlStorageOutput struct{ *pulumi.OutputState }

func (MysqlStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlStorage)(nil)).Elem()
}

func (o MysqlStorageOutput) ToMysqlStorageOutput() MysqlStorageOutput {
	return o
}

func (o MysqlStorageOutput) ToMysqlStorageOutputWithContext(ctx context.Context) MysqlStorageOutput {
	return o
}

func (o MysqlStorageOutput) ToMysqlStoragePtrOutput() MysqlStoragePtrOutput {
	return o.ToMysqlStoragePtrOutputWithContext(context.Background())
}

func (o MysqlStorageOutput) ToMysqlStoragePtrOutputWithContext(ctx context.Context) MysqlStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlStorage) *MysqlStorage {
		return &v
	}).(MysqlStoragePtrOutput)
}

// Storage size allocated for database instance
func (o MysqlStorageOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MysqlStorage) *float64 { return v.Size }).(pulumi.Float64PtrOutput)
}

// Storage type class for database instance
func (o MysqlStorageOutput) Type() MysqlStorageTypePtrOutput {
	return o.ApplyT(func(v MysqlStorage) *MysqlStorageType { return v.Type }).(MysqlStorageTypePtrOutput)
}

type MysqlStoragePtrOutput struct{ *pulumi.OutputState }

func (MysqlStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlStorage)(nil)).Elem()
}

func (o MysqlStoragePtrOutput) ToMysqlStoragePtrOutput() MysqlStoragePtrOutput {
	return o
}

func (o MysqlStoragePtrOutput) ToMysqlStoragePtrOutputWithContext(ctx context.Context) MysqlStoragePtrOutput {
	return o
}

func (o MysqlStoragePtrOutput) Elem() MysqlStorageOutput {
	return o.ApplyT(func(v *MysqlStorage) MysqlStorage {
		if v != nil {
			return *v
		}
		var ret MysqlStorage
		return ret
	}).(MysqlStorageOutput)
}

// Storage size allocated for database instance
func (o MysqlStoragePtrOutput) Size() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MysqlStorage) *float64 {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.Float64PtrOutput)
}

// Storage type class for database instance
func (o MysqlStoragePtrOutput) Type() MysqlStorageTypePtrOutput {
	return o.ApplyT(func(v *MysqlStorage) *MysqlStorageType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(MysqlStorageTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlBackupInput)(nil)).Elem(), AuroraMysqlBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlBackupPtrInput)(nil)).Elem(), AuroraMysqlBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlDatabaseInput)(nil)).Elem(), AuroraMysqlDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlDatabasePtrInput)(nil)).Elem(), AuroraMysqlDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlLoggingInput)(nil)).Elem(), AuroraMysqlLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlLoggingPtrInput)(nil)).Elem(), AuroraMysqlLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlMonitoringInput)(nil)).Elem(), AuroraMysqlMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlMonitoringPtrInput)(nil)).Elem(), AuroraMysqlMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlNetworkingInput)(nil)).Elem(), AuroraMysqlNetworkingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuroraMysqlNetworkingPtrInput)(nil)).Elem(), AuroraMysqlNetworkingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlBackupInput)(nil)).Elem(), MysqlBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlBackupPtrInput)(nil)).Elem(), MysqlBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseInput)(nil)).Elem(), MysqlDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlNetworkingInput)(nil)).Elem(), MysqlNetworkingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlNetworkingPtrInput)(nil)).Elem(), MysqlNetworkingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlStorageInput)(nil)).Elem(), MysqlStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlStoragePtrInput)(nil)).Elem(), MysqlStorageArgs{})
	pulumi.RegisterOutputType(AuroraMysqlBackupOutput{})
	pulumi.RegisterOutputType(AuroraMysqlBackupPtrOutput{})
	pulumi.RegisterOutputType(AuroraMysqlDatabaseOutput{})
	pulumi.RegisterOutputType(AuroraMysqlDatabasePtrOutput{})
	pulumi.RegisterOutputType(AuroraMysqlLoggingOutput{})
	pulumi.RegisterOutputType(AuroraMysqlLoggingPtrOutput{})
	pulumi.RegisterOutputType(AuroraMysqlMonitoringOutput{})
	pulumi.RegisterOutputType(AuroraMysqlMonitoringPtrOutput{})
	pulumi.RegisterOutputType(AuroraMysqlNetworkingOutput{})
	pulumi.RegisterOutputType(AuroraMysqlNetworkingPtrOutput{})
	pulumi.RegisterOutputType(MysqlBackupOutput{})
	pulumi.RegisterOutputType(MysqlBackupPtrOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseOutput{})
	pulumi.RegisterOutputType(MysqlNetworkingOutput{})
	pulumi.RegisterOutputType(MysqlNetworkingPtrOutput{})
	pulumi.RegisterOutputType(MysqlStorageOutput{})
	pulumi.RegisterOutputType(MysqlStoragePtrOutput{})
}
