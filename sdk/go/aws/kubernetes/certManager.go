// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apiextensions"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertManager struct {
	pulumi.ResourceState

	// The ArgoCD Application to deploy the component.
	Application apiextensions.CustomResourceOutput `pulumi:"application"`
	// The IAM roles for service accounts.
	Irsa IrsaOutput `pulumi:"irsa"`
	// The Namespace used to deploy the component.
	Namespace corev1.NamespaceOutput `pulumi:"namespace"`
}

// NewCertManager registers a new resource with the given unique name, arguments, and options.
func NewCertManager(ctx *pulumi.Context,
	name string, args *CertManagerArgs, opts ...pulumi.ResourceOption) (*CertManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneArns == nil {
		return nil, errors.New("invalid value for required argument 'ZoneArns'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CertManager
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:kubernetes:CertManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type certManagerArgs struct {
	// The list of DNS Zone arn to be used by CertManager.
	ZoneArns []string `pulumi:"zoneArns"`
}

// The set of arguments for constructing a CertManager resource.
type CertManagerArgs struct {
	// The list of DNS Zone arn to be used by CertManager.
	ZoneArns pulumi.StringArrayInput
}

func (CertManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certManagerArgs)(nil)).Elem()
}

type CertManagerInput interface {
	pulumi.Input

	ToCertManagerOutput() CertManagerOutput
	ToCertManagerOutputWithContext(ctx context.Context) CertManagerOutput
}

func (*CertManager) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManager)(nil)).Elem()
}

func (i *CertManager) ToCertManagerOutput() CertManagerOutput {
	return i.ToCertManagerOutputWithContext(context.Background())
}

func (i *CertManager) ToCertManagerOutputWithContext(ctx context.Context) CertManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerOutput)
}

// CertManagerArrayInput is an input type that accepts CertManagerArray and CertManagerArrayOutput values.
// You can construct a concrete instance of `CertManagerArrayInput` via:
//
//	CertManagerArray{ CertManagerArgs{...} }
type CertManagerArrayInput interface {
	pulumi.Input

	ToCertManagerArrayOutput() CertManagerArrayOutput
	ToCertManagerArrayOutputWithContext(context.Context) CertManagerArrayOutput
}

type CertManagerArray []CertManagerInput

func (CertManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertManager)(nil)).Elem()
}

func (i CertManagerArray) ToCertManagerArrayOutput() CertManagerArrayOutput {
	return i.ToCertManagerArrayOutputWithContext(context.Background())
}

func (i CertManagerArray) ToCertManagerArrayOutputWithContext(ctx context.Context) CertManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerArrayOutput)
}

// CertManagerMapInput is an input type that accepts CertManagerMap and CertManagerMapOutput values.
// You can construct a concrete instance of `CertManagerMapInput` via:
//
//	CertManagerMap{ "key": CertManagerArgs{...} }
type CertManagerMapInput interface {
	pulumi.Input

	ToCertManagerMapOutput() CertManagerMapOutput
	ToCertManagerMapOutputWithContext(context.Context) CertManagerMapOutput
}

type CertManagerMap map[string]CertManagerInput

func (CertManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertManager)(nil)).Elem()
}

func (i CertManagerMap) ToCertManagerMapOutput() CertManagerMapOutput {
	return i.ToCertManagerMapOutputWithContext(context.Background())
}

func (i CertManagerMap) ToCertManagerMapOutputWithContext(ctx context.Context) CertManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertManagerMapOutput)
}

type CertManagerOutput struct{ *pulumi.OutputState }

func (CertManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertManager)(nil)).Elem()
}

func (o CertManagerOutput) ToCertManagerOutput() CertManagerOutput {
	return o
}

func (o CertManagerOutput) ToCertManagerOutputWithContext(ctx context.Context) CertManagerOutput {
	return o
}

// The ArgoCD Application to deploy the component.
func (o CertManagerOutput) Application() apiextensions.CustomResourceOutput {
	return o.ApplyT(func(v *CertManager) apiextensions.CustomResourceOutput { return v.Application }).(apiextensions.CustomResourceOutput)
}

// The IAM roles for service accounts.
func (o CertManagerOutput) Irsa() IrsaOutput {
	return o.ApplyT(func(v *CertManager) IrsaOutput { return v.Irsa }).(IrsaOutput)
}

// The Namespace used to deploy the component.
func (o CertManagerOutput) Namespace() corev1.NamespaceOutput {
	return o.ApplyT(func(v *CertManager) corev1.NamespaceOutput { return v.Namespace }).(corev1.NamespaceOutput)
}

type CertManagerArrayOutput struct{ *pulumi.OutputState }

func (CertManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertManager)(nil)).Elem()
}

func (o CertManagerArrayOutput) ToCertManagerArrayOutput() CertManagerArrayOutput {
	return o
}

func (o CertManagerArrayOutput) ToCertManagerArrayOutputWithContext(ctx context.Context) CertManagerArrayOutput {
	return o
}

func (o CertManagerArrayOutput) Index(i pulumi.IntInput) CertManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertManager {
		return vs[0].([]*CertManager)[vs[1].(int)]
	}).(CertManagerOutput)
}

type CertManagerMapOutput struct{ *pulumi.OutputState }

func (CertManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertManager)(nil)).Elem()
}

func (o CertManagerMapOutput) ToCertManagerMapOutput() CertManagerMapOutput {
	return o
}

func (o CertManagerMapOutput) ToCertManagerMapOutputWithContext(ctx context.Context) CertManagerMapOutput {
	return o
}

func (o CertManagerMapOutput) MapIndex(k pulumi.StringInput) CertManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertManager {
		return vs[0].(map[string]*CertManager)[vs[1].(string)]
	}).(CertManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerInput)(nil)).Elem(), &CertManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerArrayInput)(nil)).Elem(), CertManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertManagerMapInput)(nil)).Elem(), CertManagerMap{})
	pulumi.RegisterOutputType(CertManagerOutput{})
	pulumi.RegisterOutputType(CertManagerArrayOutput{})
	pulumi.RegisterOutputType(CertManagerMapOutput{})
}
