// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IamAuthenticator is a component that integrates the AWS IAM service with the Kubernetes authentication system. He receives a list of AWS IAM users and roles to enable their authentication to the cluster.
type IamAuthenticator struct {
	pulumi.ResourceState

	// The AWS IAM Group that has admin permission in the cluster.
	ClusterAdminGroup iam.GroupOutput `pulumi:"clusterAdminGroup"`
	// The AWS IAM Group Policy that has admin permission in the cluster.
	ClusterAdminGroupPolicy iam.GroupPolicyOutput `pulumi:"clusterAdminGroupPolicy"`
	// The AWS IAM Role that has admin permission in the cluster.
	ClusterAdminRole iam.RoleOutput `pulumi:"clusterAdminRole"`
	// The AWS IAM Group Policy that has admin permission in the cluster.
	ClusterAdminRolePolicy iam.RolePolicyOutput `pulumi:"clusterAdminRolePolicy"`
	// The list of AWS IAM UserGroupMemebership to provide cluster-admin access to the given users.
	ClusterAdminUserGroupMemberships iam.UserGroupMembershipArrayOutput `pulumi:"clusterAdminUserGroupMemberships"`
	// The AWS IAM Group Policy that has admin permission in the cluster.
	ClusterUserPolicy iam.PolicyOutput `pulumi:"clusterUserPolicy"`
	// The AWS IAM Group Policy that has admin permission in the cluster.
	ClusterUserPolicyAttachment iam.PolicyAttachmentOutput `pulumi:"clusterUserPolicyAttachment"`
	// The Path applied to the authentication ConfigMap.
	ConfigMap corev1.ConfigMapOutput `pulumi:"configMap"`
	// The Kubernetes provider.
	Provider kubernetes.ProviderOutput `pulumi:"provider"`
}

// NewIamAuthenticator registers a new resource with the given unique name, arguments, and options.
func NewIamAuthenticator(ctx *pulumi.Context,
	name string, args *IamAuthenticatorArgs, opts ...pulumi.ResourceOption) (*IamAuthenticator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterArn == nil {
		return nil, errors.New("invalid value for required argument 'ClusterArn'")
	}
	if args.Kubeconfig == nil {
		return nil, errors.New("invalid value for required argument 'Kubeconfig'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IamAuthenticator
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:kubernetes:IamAuthenticator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type iamAuthenticatorArgs struct {
	// List of AWS Accounts allowed to authenticate in the cluster.
	Accounts []string `pulumi:"accounts"`
	// The list of AWS IAM Users names to be configured as cluster-admin.
	ClusterAdmins []string `pulumi:"clusterAdmins"`
	// The EKS Cluster ARN.
	ClusterArn string `pulumi:"clusterArn"`
	// The Kubeconfig to access to the cluster.
	Kubeconfig string `pulumi:"kubeconfig"`
	// The list of AWS IAM Roles for NodeGroups to generate the aws-auth ConfigMap.
	NodeGroupRoles []IamAuthenticatorRole `pulumi:"nodeGroupRoles"`
	// The list of AWS IAM Roles to generate the aws-auth ConfigMap.
	Roles []IamAuthenticatorRole `pulumi:"roles"`
	// The list of AWS IAM Users to generate the aws-auth ConfigMap.
	Users []IamAuthenticatorUser `pulumi:"users"`
}

// The set of arguments for constructing a IamAuthenticator resource.
type IamAuthenticatorArgs struct {
	// List of AWS Accounts allowed to authenticate in the cluster.
	Accounts pulumi.StringArrayInput
	// The list of AWS IAM Users names to be configured as cluster-admin.
	ClusterAdmins pulumi.StringArrayInput
	// The EKS Cluster ARN.
	ClusterArn pulumi.StringInput
	// The Kubeconfig to access to the cluster.
	Kubeconfig pulumi.StringInput
	// The list of AWS IAM Roles for NodeGroups to generate the aws-auth ConfigMap.
	NodeGroupRoles IamAuthenticatorRoleArrayInput
	// The list of AWS IAM Roles to generate the aws-auth ConfigMap.
	Roles IamAuthenticatorRoleArrayInput
	// The list of AWS IAM Users to generate the aws-auth ConfigMap.
	Users IamAuthenticatorUserArrayInput
}

func (IamAuthenticatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamAuthenticatorArgs)(nil)).Elem()
}

type IamAuthenticatorInput interface {
	pulumi.Input

	ToIamAuthenticatorOutput() IamAuthenticatorOutput
	ToIamAuthenticatorOutputWithContext(ctx context.Context) IamAuthenticatorOutput
}

func (*IamAuthenticator) ElementType() reflect.Type {
	return reflect.TypeOf((**IamAuthenticator)(nil)).Elem()
}

func (i *IamAuthenticator) ToIamAuthenticatorOutput() IamAuthenticatorOutput {
	return i.ToIamAuthenticatorOutputWithContext(context.Background())
}

func (i *IamAuthenticator) ToIamAuthenticatorOutputWithContext(ctx context.Context) IamAuthenticatorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamAuthenticatorOutput)
}

// IamAuthenticatorArrayInput is an input type that accepts IamAuthenticatorArray and IamAuthenticatorArrayOutput values.
// You can construct a concrete instance of `IamAuthenticatorArrayInput` via:
//
//	IamAuthenticatorArray{ IamAuthenticatorArgs{...} }
type IamAuthenticatorArrayInput interface {
	pulumi.Input

	ToIamAuthenticatorArrayOutput() IamAuthenticatorArrayOutput
	ToIamAuthenticatorArrayOutputWithContext(context.Context) IamAuthenticatorArrayOutput
}

type IamAuthenticatorArray []IamAuthenticatorInput

func (IamAuthenticatorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamAuthenticator)(nil)).Elem()
}

func (i IamAuthenticatorArray) ToIamAuthenticatorArrayOutput() IamAuthenticatorArrayOutput {
	return i.ToIamAuthenticatorArrayOutputWithContext(context.Background())
}

func (i IamAuthenticatorArray) ToIamAuthenticatorArrayOutputWithContext(ctx context.Context) IamAuthenticatorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamAuthenticatorArrayOutput)
}

// IamAuthenticatorMapInput is an input type that accepts IamAuthenticatorMap and IamAuthenticatorMapOutput values.
// You can construct a concrete instance of `IamAuthenticatorMapInput` via:
//
//	IamAuthenticatorMap{ "key": IamAuthenticatorArgs{...} }
type IamAuthenticatorMapInput interface {
	pulumi.Input

	ToIamAuthenticatorMapOutput() IamAuthenticatorMapOutput
	ToIamAuthenticatorMapOutputWithContext(context.Context) IamAuthenticatorMapOutput
}

type IamAuthenticatorMap map[string]IamAuthenticatorInput

func (IamAuthenticatorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamAuthenticator)(nil)).Elem()
}

func (i IamAuthenticatorMap) ToIamAuthenticatorMapOutput() IamAuthenticatorMapOutput {
	return i.ToIamAuthenticatorMapOutputWithContext(context.Background())
}

func (i IamAuthenticatorMap) ToIamAuthenticatorMapOutputWithContext(ctx context.Context) IamAuthenticatorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamAuthenticatorMapOutput)
}

type IamAuthenticatorOutput struct{ *pulumi.OutputState }

func (IamAuthenticatorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamAuthenticator)(nil)).Elem()
}

func (o IamAuthenticatorOutput) ToIamAuthenticatorOutput() IamAuthenticatorOutput {
	return o
}

func (o IamAuthenticatorOutput) ToIamAuthenticatorOutputWithContext(ctx context.Context) IamAuthenticatorOutput {
	return o
}

// The AWS IAM Group that has admin permission in the cluster.
func (o IamAuthenticatorOutput) ClusterAdminGroup() iam.GroupOutput {
	return o.ApplyT(func(v *IamAuthenticator) iam.GroupOutput { return v.ClusterAdminGroup }).(iam.GroupOutput)
}

// The AWS IAM Group Policy that has admin permission in the cluster.
func (o IamAuthenticatorOutput) ClusterAdminGroupPolicy() iam.GroupPolicyOutput {
	return o.ApplyT(func(v *IamAuthenticator) iam.GroupPolicyOutput { return v.ClusterAdminGroupPolicy }).(iam.GroupPolicyOutput)
}

// The AWS IAM Role that has admin permission in the cluster.
func (o IamAuthenticatorOutput) ClusterAdminRole() iam.RoleOutput {
	return o.ApplyT(func(v *IamAuthenticator) iam.RoleOutput { return v.ClusterAdminRole }).(iam.RoleOutput)
}

// The AWS IAM Group Policy that has admin permission in the cluster.
func (o IamAuthenticatorOutput) ClusterAdminRolePolicy() iam.RolePolicyOutput {
	return o.ApplyT(func(v *IamAuthenticator) iam.RolePolicyOutput { return v.ClusterAdminRolePolicy }).(iam.RolePolicyOutput)
}

// The list of AWS IAM UserGroupMemebership to provide cluster-admin access to the given users.
func (o IamAuthenticatorOutput) ClusterAdminUserGroupMemberships() iam.UserGroupMembershipArrayOutput {
	return o.ApplyT(func(v *IamAuthenticator) iam.UserGroupMembershipArrayOutput {
		return v.ClusterAdminUserGroupMemberships
	}).(iam.UserGroupMembershipArrayOutput)
}

// The AWS IAM Group Policy that has admin permission in the cluster.
func (o IamAuthenticatorOutput) ClusterUserPolicy() iam.PolicyOutput {
	return o.ApplyT(func(v *IamAuthenticator) iam.PolicyOutput { return v.ClusterUserPolicy }).(iam.PolicyOutput)
}

// The AWS IAM Group Policy that has admin permission in the cluster.
func (o IamAuthenticatorOutput) ClusterUserPolicyAttachment() iam.PolicyAttachmentOutput {
	return o.ApplyT(func(v *IamAuthenticator) iam.PolicyAttachmentOutput { return v.ClusterUserPolicyAttachment }).(iam.PolicyAttachmentOutput)
}

// The Path applied to the authentication ConfigMap.
func (o IamAuthenticatorOutput) ConfigMap() corev1.ConfigMapOutput {
	return o.ApplyT(func(v *IamAuthenticator) corev1.ConfigMapOutput { return v.ConfigMap }).(corev1.ConfigMapOutput)
}

// The Kubernetes provider.
func (o IamAuthenticatorOutput) Provider() kubernetes.ProviderOutput {
	return o.ApplyT(func(v *IamAuthenticator) kubernetes.ProviderOutput { return v.Provider }).(kubernetes.ProviderOutput)
}

type IamAuthenticatorArrayOutput struct{ *pulumi.OutputState }

func (IamAuthenticatorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamAuthenticator)(nil)).Elem()
}

func (o IamAuthenticatorArrayOutput) ToIamAuthenticatorArrayOutput() IamAuthenticatorArrayOutput {
	return o
}

func (o IamAuthenticatorArrayOutput) ToIamAuthenticatorArrayOutputWithContext(ctx context.Context) IamAuthenticatorArrayOutput {
	return o
}

func (o IamAuthenticatorArrayOutput) Index(i pulumi.IntInput) IamAuthenticatorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamAuthenticator {
		return vs[0].([]*IamAuthenticator)[vs[1].(int)]
	}).(IamAuthenticatorOutput)
}

type IamAuthenticatorMapOutput struct{ *pulumi.OutputState }

func (IamAuthenticatorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamAuthenticator)(nil)).Elem()
}

func (o IamAuthenticatorMapOutput) ToIamAuthenticatorMapOutput() IamAuthenticatorMapOutput {
	return o
}

func (o IamAuthenticatorMapOutput) ToIamAuthenticatorMapOutputWithContext(ctx context.Context) IamAuthenticatorMapOutput {
	return o
}

func (o IamAuthenticatorMapOutput) MapIndex(k pulumi.StringInput) IamAuthenticatorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamAuthenticator {
		return vs[0].(map[string]*IamAuthenticator)[vs[1].(string)]
	}).(IamAuthenticatorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamAuthenticatorInput)(nil)).Elem(), &IamAuthenticator{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamAuthenticatorArrayInput)(nil)).Elem(), IamAuthenticatorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamAuthenticatorMapInput)(nil)).Elem(), IamAuthenticatorMap{})
	pulumi.RegisterOutputType(IamAuthenticatorOutput{})
	pulumi.RegisterOutputType(IamAuthenticatorArrayOutput{})
	pulumi.RegisterOutputType(IamAuthenticatorMapOutput{})
}
