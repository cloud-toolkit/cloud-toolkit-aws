// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cloudwatch"
	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apiextensions"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fluentbit is a component that deploy the Fluentbit component to send logs to AWS CloudWatch.
type Fluentbit struct {
	pulumi.ResourceState

	Application apiextensions.CustomResourceOutput `pulumi:"application"`
	// IRSA for Fluentbit component
	Irsa IrsaOutput `pulumi:"irsa"`
	// The AWS CloudWatch LogGroup where application logs are stored.
	LogGroupApplicationLog cloudwatch.LogGroupOutput `pulumi:"logGroupApplicationLog"`
	// The AWS CloudWatch LogGroup where dataplane logs are stored.
	LogGroupDataplaneLog cloudwatch.LogGroupOutput `pulumi:"logGroupDataplaneLog"`
	// The AWS CloudWatch LogGroup where Hosts logs are stored.
	LogGroupHostLog cloudwatch.LogGroupOutput `pulumi:"logGroupHostLog"`
	// The Namespace used to deploy the component.
	Namespace corev1.NamespaceOutput `pulumi:"namespace"`
}

// NewFluentbit registers a new resource with the given unique name, arguments, and options.
func NewFluentbit(ctx *pulumi.Context,
	name string, args *FluentbitArgs, opts ...pulumi.ResourceOption) (*Fluentbit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsRegion == nil {
		return nil, errors.New("invalid value for required argument 'AwsRegion'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Fluentbit
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:kubernetes:Fluentbit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type fluentbitArgs struct {
	// The AWS Region.
	AwsRegion string `pulumi:"awsRegion"`
	// The cluster name.
	ClusterName string `pulumi:"clusterName"`
	// Configure logging.
	Logging *FluentbitLogging `pulumi:"logging"`
}

// The set of arguments for constructing a Fluentbit resource.
type FluentbitArgs struct {
	// The AWS Region.
	AwsRegion pulumi.StringInput
	// The cluster name.
	ClusterName pulumi.StringInput
	// Configure logging.
	Logging FluentbitLoggingPtrInput
}

func (FluentbitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fluentbitArgs)(nil)).Elem()
}

type FluentbitInput interface {
	pulumi.Input

	ToFluentbitOutput() FluentbitOutput
	ToFluentbitOutputWithContext(ctx context.Context) FluentbitOutput
}

func (*Fluentbit) ElementType() reflect.Type {
	return reflect.TypeOf((**Fluentbit)(nil)).Elem()
}

func (i *Fluentbit) ToFluentbitOutput() FluentbitOutput {
	return i.ToFluentbitOutputWithContext(context.Background())
}

func (i *Fluentbit) ToFluentbitOutputWithContext(ctx context.Context) FluentbitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FluentbitOutput)
}

// FluentbitArrayInput is an input type that accepts FluentbitArray and FluentbitArrayOutput values.
// You can construct a concrete instance of `FluentbitArrayInput` via:
//
//	FluentbitArray{ FluentbitArgs{...} }
type FluentbitArrayInput interface {
	pulumi.Input

	ToFluentbitArrayOutput() FluentbitArrayOutput
	ToFluentbitArrayOutputWithContext(context.Context) FluentbitArrayOutput
}

type FluentbitArray []FluentbitInput

func (FluentbitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fluentbit)(nil)).Elem()
}

func (i FluentbitArray) ToFluentbitArrayOutput() FluentbitArrayOutput {
	return i.ToFluentbitArrayOutputWithContext(context.Background())
}

func (i FluentbitArray) ToFluentbitArrayOutputWithContext(ctx context.Context) FluentbitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FluentbitArrayOutput)
}

// FluentbitMapInput is an input type that accepts FluentbitMap and FluentbitMapOutput values.
// You can construct a concrete instance of `FluentbitMapInput` via:
//
//	FluentbitMap{ "key": FluentbitArgs{...} }
type FluentbitMapInput interface {
	pulumi.Input

	ToFluentbitMapOutput() FluentbitMapOutput
	ToFluentbitMapOutputWithContext(context.Context) FluentbitMapOutput
}

type FluentbitMap map[string]FluentbitInput

func (FluentbitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fluentbit)(nil)).Elem()
}

func (i FluentbitMap) ToFluentbitMapOutput() FluentbitMapOutput {
	return i.ToFluentbitMapOutputWithContext(context.Background())
}

func (i FluentbitMap) ToFluentbitMapOutputWithContext(ctx context.Context) FluentbitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FluentbitMapOutput)
}

type FluentbitOutput struct{ *pulumi.OutputState }

func (FluentbitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fluentbit)(nil)).Elem()
}

func (o FluentbitOutput) ToFluentbitOutput() FluentbitOutput {
	return o
}

func (o FluentbitOutput) ToFluentbitOutputWithContext(ctx context.Context) FluentbitOutput {
	return o
}

func (o FluentbitOutput) Application() apiextensions.CustomResourceOutput {
	return o.ApplyT(func(v *Fluentbit) apiextensions.CustomResourceOutput { return v.Application }).(apiextensions.CustomResourceOutput)
}

// IRSA for Fluentbit component
func (o FluentbitOutput) Irsa() IrsaOutput {
	return o.ApplyT(func(v *Fluentbit) IrsaOutput { return v.Irsa }).(IrsaOutput)
}

// The AWS CloudWatch LogGroup where application logs are stored.
func (o FluentbitOutput) LogGroupApplicationLog() cloudwatch.LogGroupOutput {
	return o.ApplyT(func(v *Fluentbit) cloudwatch.LogGroupOutput { return v.LogGroupApplicationLog }).(cloudwatch.LogGroupOutput)
}

// The AWS CloudWatch LogGroup where dataplane logs are stored.
func (o FluentbitOutput) LogGroupDataplaneLog() cloudwatch.LogGroupOutput {
	return o.ApplyT(func(v *Fluentbit) cloudwatch.LogGroupOutput { return v.LogGroupDataplaneLog }).(cloudwatch.LogGroupOutput)
}

// The AWS CloudWatch LogGroup where Hosts logs are stored.
func (o FluentbitOutput) LogGroupHostLog() cloudwatch.LogGroupOutput {
	return o.ApplyT(func(v *Fluentbit) cloudwatch.LogGroupOutput { return v.LogGroupHostLog }).(cloudwatch.LogGroupOutput)
}

// The Namespace used to deploy the component.
func (o FluentbitOutput) Namespace() corev1.NamespaceOutput {
	return o.ApplyT(func(v *Fluentbit) corev1.NamespaceOutput { return v.Namespace }).(corev1.NamespaceOutput)
}

type FluentbitArrayOutput struct{ *pulumi.OutputState }

func (FluentbitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fluentbit)(nil)).Elem()
}

func (o FluentbitArrayOutput) ToFluentbitArrayOutput() FluentbitArrayOutput {
	return o
}

func (o FluentbitArrayOutput) ToFluentbitArrayOutputWithContext(ctx context.Context) FluentbitArrayOutput {
	return o
}

func (o FluentbitArrayOutput) Index(i pulumi.IntInput) FluentbitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fluentbit {
		return vs[0].([]*Fluentbit)[vs[1].(int)]
	}).(FluentbitOutput)
}

type FluentbitMapOutput struct{ *pulumi.OutputState }

func (FluentbitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fluentbit)(nil)).Elem()
}

func (o FluentbitMapOutput) ToFluentbitMapOutput() FluentbitMapOutput {
	return o
}

func (o FluentbitMapOutput) ToFluentbitMapOutputWithContext(ctx context.Context) FluentbitMapOutput {
	return o
}

func (o FluentbitMapOutput) MapIndex(k pulumi.StringInput) FluentbitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fluentbit {
		return vs[0].(map[string]*Fluentbit)[vs[1].(string)]
	}).(FluentbitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FluentbitInput)(nil)).Elem(), &Fluentbit{})
	pulumi.RegisterInputType(reflect.TypeOf((*FluentbitArrayInput)(nil)).Elem(), FluentbitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FluentbitMapInput)(nil)).Elem(), FluentbitMap{})
	pulumi.RegisterOutputType(FluentbitOutput{})
	pulumi.RegisterOutputType(FluentbitArrayOutput{})
	pulumi.RegisterOutputType(FluentbitMapOutput{})
}
