// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/eks"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes"
	helmv3 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/helm/v3"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Cluster is a component that deploys a production-ready Kubernetes cluster. It setups the AWS IAM and netwokring, as well many Kubernetes services to run application in production.
type Cluster struct {
	pulumi.ResourceState

	// The EKS Cluster.
	Cluster eks.ClusterOutput `pulumi:"cluster"`
	// The VPC CNI Chart installed in the cluster.
	ClusterAddons ClusterAddonsOutput `pulumi:"clusterAddons"`
	// The VPC CNI Chart installed in the cluster.
	CniChart helmv3.ReleaseOutput `pulumi:"cniChart"`
	// The default OIDC Provider.
	DefaultOidcProvider iam.OpenIdConnectProviderOutput `pulumi:"defaultOidcProvider"`
	// The IAM Authenticator to integrate AWS IAM with Kubernetes authentication.
	IamAuthenticator IamAuthenticatorOutput `pulumi:"iamAuthenticator"`
	// The kubeconfig content for this cluster.
	Kubeconfig pulumi.StringOutput `pulumi:"kubeconfig"`
	// The Node Groups associated to the cluster.
	NodeGroups NodeGroupArrayOutput `pulumi:"nodeGroups"`
	// The Kubernetes provider for this cluster.
	Provider kubernetes.ProviderOutput `pulumi:"provider"`
	// The Provider to provision EKS cluster.
	ProvisionerProvider aws.ProviderOutput `pulumi:"provisionerProvider"`
	// The IAM Role to provision EKS cluster.
	ProvisionerRole iam.RoleOutput `pulumi:"provisionerRole"`
	// The IAM Role Polity to provision EKS cluster.
	ProvisionerRolePolicy iam.RolePolicyOutput `pulumi:"provisionerRolePolicy"`
	// The IAM Role assumed by the EKS Cluster.
	Role iam.RoleOutput `pulumi:"role"`
	// The IAM Role Policy Attachment to assign the IAM Policies to the IAM Role.
	RolePolicyAttachment iam.RolePolicyAttachmentOutput `pulumi:"rolePolicyAttachment"`
	// The Security Group associated to the EKS Cluster.
	SecurityGroup ec2.SecurityGroupOutput `pulumi:"securityGroup"`
	// EC2 Tags used for provisioning Load Balancers.
	SubnetTags ec2.TagArrayOutput `pulumi:"subnetTags"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		args = &ClusterArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:kubernetes:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type clusterArgs struct {
	// The addons installed in the cluster.
	Addons *Addons `pulumi:"addons"`
	// Configure the Kubernetes cluster API.
	Api *ClusterApi `pulumi:"api"`
	// Configure authentication integrated with AWS IAM.
	Authentication *ClusterAuthentication `pulumi:"authentication"`
	// Configure the cluster observability for logging.
	Logging *FluentbitLogging `pulumi:"logging"`
	// Configure the cluster observability for metrics.
	Metrics *AdotApplicationMetrics `pulumi:"metrics"`
	// Configure the cluster networking.
	Networking *ClusterNetworking `pulumi:"networking"`
	// The NodeGroups to be assigned to this cluster.
	NodeGroups []ClusterNodeGroup `pulumi:"nodeGroups"`
	// The OIDC Providers configuration.
	OidcProviders *ClusterOidcProviders `pulumi:"oidcProviders"`
	// The list of private subnet ids where for the EKS cluster. These subnets will be tagged for Kubernetes purposes.
	PrivateSubnetIds []string `pulumi:"privateSubnetIds"`
	// The list of public subnet ids where for the EKS cluster. These subnets will be tagged for Kubernetes purposes.
	PublicSubnetIds []string `pulumi:"publicSubnetIds"`
	// Desired Kubernetes version for control plane. Defaults to '1.22'.
	Version *string `pulumi:"version"`
	// The VPC ID where the cluster will be deployed
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The addons installed in the cluster.
	Addons AddonsPtrInput
	// Configure the Kubernetes cluster API.
	Api ClusterApiPtrInput
	// Configure authentication integrated with AWS IAM.
	Authentication ClusterAuthenticationPtrInput
	// Configure the cluster observability for logging.
	Logging FluentbitLoggingPtrInput
	// Configure the cluster observability for metrics.
	Metrics AdotApplicationMetricsPtrInput
	// Configure the cluster networking.
	Networking ClusterNetworkingPtrInput
	// The NodeGroups to be assigned to this cluster.
	NodeGroups ClusterNodeGroupArrayInput
	// The OIDC Providers configuration.
	OidcProviders ClusterOidcProvidersPtrInput
	// The list of private subnet ids where for the EKS cluster. These subnets will be tagged for Kubernetes purposes.
	PrivateSubnetIds pulumi.StringArrayInput
	// The list of public subnet ids where for the EKS cluster. These subnets will be tagged for Kubernetes purposes.
	PublicSubnetIds pulumi.StringArrayInput
	// Desired Kubernetes version for control plane. Defaults to '1.22'.
	Version pulumi.StringPtrInput
	// The VPC ID where the cluster will be deployed
	VpcId pulumi.StringPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The EKS Cluster.
func (o ClusterOutput) Cluster() eks.ClusterOutput {
	return o.ApplyT(func(v *Cluster) eks.ClusterOutput { return v.Cluster }).(eks.ClusterOutput)
}

// The VPC CNI Chart installed in the cluster.
func (o ClusterOutput) ClusterAddons() ClusterAddonsOutput {
	return o.ApplyT(func(v *Cluster) ClusterAddonsOutput { return v.ClusterAddons }).(ClusterAddonsOutput)
}

// The VPC CNI Chart installed in the cluster.
func (o ClusterOutput) CniChart() helmv3.ReleaseOutput {
	return o.ApplyT(func(v *Cluster) helmv3.ReleaseOutput { return v.CniChart }).(helmv3.ReleaseOutput)
}

// The default OIDC Provider.
func (o ClusterOutput) DefaultOidcProvider() iam.OpenIdConnectProviderOutput {
	return o.ApplyT(func(v *Cluster) iam.OpenIdConnectProviderOutput { return v.DefaultOidcProvider }).(iam.OpenIdConnectProviderOutput)
}

// The IAM Authenticator to integrate AWS IAM with Kubernetes authentication.
func (o ClusterOutput) IamAuthenticator() IamAuthenticatorOutput {
	return o.ApplyT(func(v *Cluster) IamAuthenticatorOutput { return v.IamAuthenticator }).(IamAuthenticatorOutput)
}

// The kubeconfig content for this cluster.
func (o ClusterOutput) Kubeconfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Kubeconfig }).(pulumi.StringOutput)
}

// The Node Groups associated to the cluster.
func (o ClusterOutput) NodeGroups() NodeGroupArrayOutput {
	return o.ApplyT(func(v *Cluster) NodeGroupArrayOutput { return v.NodeGroups }).(NodeGroupArrayOutput)
}

// The Kubernetes provider for this cluster.
func (o ClusterOutput) Provider() kubernetes.ProviderOutput {
	return o.ApplyT(func(v *Cluster) kubernetes.ProviderOutput { return v.Provider }).(kubernetes.ProviderOutput)
}

// The Provider to provision EKS cluster.
func (o ClusterOutput) ProvisionerProvider() aws.ProviderOutput {
	return o.ApplyT(func(v *Cluster) aws.ProviderOutput { return v.ProvisionerProvider }).(aws.ProviderOutput)
}

// The IAM Role to provision EKS cluster.
func (o ClusterOutput) ProvisionerRole() iam.RoleOutput {
	return o.ApplyT(func(v *Cluster) iam.RoleOutput { return v.ProvisionerRole }).(iam.RoleOutput)
}

// The IAM Role Polity to provision EKS cluster.
func (o ClusterOutput) ProvisionerRolePolicy() iam.RolePolicyOutput {
	return o.ApplyT(func(v *Cluster) iam.RolePolicyOutput { return v.ProvisionerRolePolicy }).(iam.RolePolicyOutput)
}

// The IAM Role assumed by the EKS Cluster.
func (o ClusterOutput) Role() iam.RoleOutput {
	return o.ApplyT(func(v *Cluster) iam.RoleOutput { return v.Role }).(iam.RoleOutput)
}

// The IAM Role Policy Attachment to assign the IAM Policies to the IAM Role.
func (o ClusterOutput) RolePolicyAttachment() iam.RolePolicyAttachmentOutput {
	return o.ApplyT(func(v *Cluster) iam.RolePolicyAttachmentOutput { return v.RolePolicyAttachment }).(iam.RolePolicyAttachmentOutput)
}

// The Security Group associated to the EKS Cluster.
func (o ClusterOutput) SecurityGroup() ec2.SecurityGroupOutput {
	return o.ApplyT(func(v *Cluster) ec2.SecurityGroupOutput { return v.SecurityGroup }).(ec2.SecurityGroupOutput)
}

// EC2 Tags used for provisioning Load Balancers.
func (o ClusterOutput) SubnetTags() ec2.TagArrayOutput {
	return o.ApplyT(func(v *Cluster) ec2.TagArrayOutput { return v.SubnetTags }).(ec2.TagArrayOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
