// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	helmv3 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/helm/v3"
	"github.com/pulumi/pulumi-random/sdk/v4/go/random"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ArgoCD is a component that deploy the ArgoCD application in the cluster.
type ArgoCD struct {
	pulumi.ResourceState

	// The inital admin password.
	AdminPassword random.RandomPasswordOutput `pulumi:"adminPassword"`
	// The Helm Chart used to deploy ArgoCD.
	Chart helmv3.ReleaseOutput `pulumi:"chart"`
	// The Namespace used to deploy the component.
	Namespace corev1.NamespaceOutput `pulumi:"namespace"`
}

// NewArgoCD registers a new resource with the given unique name, arguments, and options.
func NewArgoCD(ctx *pulumi.Context,
	name string, args *ArgoCDArgs, opts ...pulumi.ResourceOption) (*ArgoCD, error) {
	if args == nil {
		args = &ArgoCDArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ArgoCD
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:kubernetes:ArgoCD", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type argoCDArgs struct {
	// The hostname to be used to expose ArgoCD with an Ingress.
	Hostname *string `pulumi:"hostname"`
}

// The set of arguments for constructing a ArgoCD resource.
type ArgoCDArgs struct {
	// The hostname to be used to expose ArgoCD with an Ingress.
	Hostname pulumi.StringPtrInput
}

func (ArgoCDArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*argoCDArgs)(nil)).Elem()
}

type ArgoCDInput interface {
	pulumi.Input

	ToArgoCDOutput() ArgoCDOutput
	ToArgoCDOutputWithContext(ctx context.Context) ArgoCDOutput
}

func (*ArgoCD) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCD)(nil)).Elem()
}

func (i *ArgoCD) ToArgoCDOutput() ArgoCDOutput {
	return i.ToArgoCDOutputWithContext(context.Background())
}

func (i *ArgoCD) ToArgoCDOutputWithContext(ctx context.Context) ArgoCDOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDOutput)
}

// ArgoCDArrayInput is an input type that accepts ArgoCDArray and ArgoCDArrayOutput values.
// You can construct a concrete instance of `ArgoCDArrayInput` via:
//
//	ArgoCDArray{ ArgoCDArgs{...} }
type ArgoCDArrayInput interface {
	pulumi.Input

	ToArgoCDArrayOutput() ArgoCDArrayOutput
	ToArgoCDArrayOutputWithContext(context.Context) ArgoCDArrayOutput
}

type ArgoCDArray []ArgoCDInput

func (ArgoCDArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArgoCD)(nil)).Elem()
}

func (i ArgoCDArray) ToArgoCDArrayOutput() ArgoCDArrayOutput {
	return i.ToArgoCDArrayOutputWithContext(context.Background())
}

func (i ArgoCDArray) ToArgoCDArrayOutputWithContext(ctx context.Context) ArgoCDArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDArrayOutput)
}

// ArgoCDMapInput is an input type that accepts ArgoCDMap and ArgoCDMapOutput values.
// You can construct a concrete instance of `ArgoCDMapInput` via:
//
//	ArgoCDMap{ "key": ArgoCDArgs{...} }
type ArgoCDMapInput interface {
	pulumi.Input

	ToArgoCDMapOutput() ArgoCDMapOutput
	ToArgoCDMapOutputWithContext(context.Context) ArgoCDMapOutput
}

type ArgoCDMap map[string]ArgoCDInput

func (ArgoCDMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArgoCD)(nil)).Elem()
}

func (i ArgoCDMap) ToArgoCDMapOutput() ArgoCDMapOutput {
	return i.ToArgoCDMapOutputWithContext(context.Background())
}

func (i ArgoCDMap) ToArgoCDMapOutputWithContext(ctx context.Context) ArgoCDMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgoCDMapOutput)
}

type ArgoCDOutput struct{ *pulumi.OutputState }

func (ArgoCDOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArgoCD)(nil)).Elem()
}

func (o ArgoCDOutput) ToArgoCDOutput() ArgoCDOutput {
	return o
}

func (o ArgoCDOutput) ToArgoCDOutputWithContext(ctx context.Context) ArgoCDOutput {
	return o
}

// The inital admin password.
func (o ArgoCDOutput) AdminPassword() random.RandomPasswordOutput {
	return o.ApplyT(func(v *ArgoCD) random.RandomPasswordOutput { return v.AdminPassword }).(random.RandomPasswordOutput)
}

// The Helm Chart used to deploy ArgoCD.
func (o ArgoCDOutput) Chart() helmv3.ReleaseOutput {
	return o.ApplyT(func(v *ArgoCD) helmv3.ReleaseOutput { return v.Chart }).(helmv3.ReleaseOutput)
}

// The Namespace used to deploy the component.
func (o ArgoCDOutput) Namespace() corev1.NamespaceOutput {
	return o.ApplyT(func(v *ArgoCD) corev1.NamespaceOutput { return v.Namespace }).(corev1.NamespaceOutput)
}

type ArgoCDArrayOutput struct{ *pulumi.OutputState }

func (ArgoCDArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArgoCD)(nil)).Elem()
}

func (o ArgoCDArrayOutput) ToArgoCDArrayOutput() ArgoCDArrayOutput {
	return o
}

func (o ArgoCDArrayOutput) ToArgoCDArrayOutputWithContext(ctx context.Context) ArgoCDArrayOutput {
	return o
}

func (o ArgoCDArrayOutput) Index(i pulumi.IntInput) ArgoCDOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ArgoCD {
		return vs[0].([]*ArgoCD)[vs[1].(int)]
	}).(ArgoCDOutput)
}

type ArgoCDMapOutput struct{ *pulumi.OutputState }

func (ArgoCDMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArgoCD)(nil)).Elem()
}

func (o ArgoCDMapOutput) ToArgoCDMapOutput() ArgoCDMapOutput {
	return o
}

func (o ArgoCDMapOutput) ToArgoCDMapOutputWithContext(ctx context.Context) ArgoCDMapOutput {
	return o
}

func (o ArgoCDMapOutput) MapIndex(k pulumi.StringInput) ArgoCDOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ArgoCD {
		return vs[0].(map[string]*ArgoCD)[vs[1].(string)]
	}).(ArgoCDOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoCDInput)(nil)).Elem(), &ArgoCD{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoCDArrayInput)(nil)).Elem(), ArgoCDArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgoCDMapInput)(nil)).Elem(), ArgoCDMap{})
	pulumi.RegisterOutputType(ArgoCDOutput{})
	pulumi.RegisterOutputType(ArgoCDArrayOutput{})
	pulumi.RegisterOutputType(ArgoCDMapOutput{})
}
