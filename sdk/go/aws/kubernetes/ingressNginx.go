// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/cloud-toolkit/cloud-toolkit-aws/sdk/go/aws/commons"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apiextensions"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IngressNginx is a component that deploy the Nginx IngressController to expose applications over HTTP/HTTPS.
type IngressNginx struct {
	pulumi.ResourceState

	// The ArgoCD Application to deploy the component.
	Application apiextensions.CustomResourceOutput `pulumi:"application"`
	// The ACM Certificates used for TLS encryption.
	Certificate commons.CertificateOutput `pulumi:"certificate"`
	// The Namespace used to deploy the component.
	Namespace corev1.NamespaceOutput `pulumi:"namespace"`
}

// NewIngressNginx registers a new resource with the given unique name, arguments, and options.
func NewIngressNginx(ctx *pulumi.Context,
	name string, args *IngressNginxArgs, opts ...pulumi.ResourceOption) (*IngressNginx, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClassName == nil {
		return nil, errors.New("invalid value for required argument 'ClassName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IngressNginx
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:kubernetes:IngressNginx", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type ingressNginxArgs struct {
	// The Ingress class name.
	ClassName string `pulumi:"className"`
	// Set this IngressController with the defaul IngressClass.
	Default *bool `pulumi:"default"`
	// Expose the IngressController with a public Load Balancer.
	Public *bool `pulumi:"public"`
	// The domain associated to the IngressController.
	Tls *IngressNginxTls `pulumi:"tls"`
	// The whitelist of CIDR to access to the Ingress Controller.
	Whitelist []string `pulumi:"whitelist"`
}

// The set of arguments for constructing a IngressNginx resource.
type IngressNginxArgs struct {
	// The Ingress class name.
	ClassName pulumi.StringInput
	// Set this IngressController with the defaul IngressClass.
	Default pulumi.BoolPtrInput
	// Expose the IngressController with a public Load Balancer.
	Public pulumi.BoolPtrInput
	// The domain associated to the IngressController.
	Tls IngressNginxTlsPtrInput
	// The whitelist of CIDR to access to the Ingress Controller.
	Whitelist pulumi.StringArrayInput
}

func (IngressNginxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingressNginxArgs)(nil)).Elem()
}

type IngressNginxInput interface {
	pulumi.Input

	ToIngressNginxOutput() IngressNginxOutput
	ToIngressNginxOutputWithContext(ctx context.Context) IngressNginxOutput
}

func (*IngressNginx) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressNginx)(nil)).Elem()
}

func (i *IngressNginx) ToIngressNginxOutput() IngressNginxOutput {
	return i.ToIngressNginxOutputWithContext(context.Background())
}

func (i *IngressNginx) ToIngressNginxOutputWithContext(ctx context.Context) IngressNginxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressNginxOutput)
}

// IngressNginxArrayInput is an input type that accepts IngressNginxArray and IngressNginxArrayOutput values.
// You can construct a concrete instance of `IngressNginxArrayInput` via:
//
//	IngressNginxArray{ IngressNginxArgs{...} }
type IngressNginxArrayInput interface {
	pulumi.Input

	ToIngressNginxArrayOutput() IngressNginxArrayOutput
	ToIngressNginxArrayOutputWithContext(context.Context) IngressNginxArrayOutput
}

type IngressNginxArray []IngressNginxInput

func (IngressNginxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngressNginx)(nil)).Elem()
}

func (i IngressNginxArray) ToIngressNginxArrayOutput() IngressNginxArrayOutput {
	return i.ToIngressNginxArrayOutputWithContext(context.Background())
}

func (i IngressNginxArray) ToIngressNginxArrayOutputWithContext(ctx context.Context) IngressNginxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressNginxArrayOutput)
}

// IngressNginxMapInput is an input type that accepts IngressNginxMap and IngressNginxMapOutput values.
// You can construct a concrete instance of `IngressNginxMapInput` via:
//
//	IngressNginxMap{ "key": IngressNginxArgs{...} }
type IngressNginxMapInput interface {
	pulumi.Input

	ToIngressNginxMapOutput() IngressNginxMapOutput
	ToIngressNginxMapOutputWithContext(context.Context) IngressNginxMapOutput
}

type IngressNginxMap map[string]IngressNginxInput

func (IngressNginxMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngressNginx)(nil)).Elem()
}

func (i IngressNginxMap) ToIngressNginxMapOutput() IngressNginxMapOutput {
	return i.ToIngressNginxMapOutputWithContext(context.Background())
}

func (i IngressNginxMap) ToIngressNginxMapOutputWithContext(ctx context.Context) IngressNginxMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngressNginxMapOutput)
}

type IngressNginxOutput struct{ *pulumi.OutputState }

func (IngressNginxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngressNginx)(nil)).Elem()
}

func (o IngressNginxOutput) ToIngressNginxOutput() IngressNginxOutput {
	return o
}

func (o IngressNginxOutput) ToIngressNginxOutputWithContext(ctx context.Context) IngressNginxOutput {
	return o
}

// The ArgoCD Application to deploy the component.
func (o IngressNginxOutput) Application() apiextensions.CustomResourceOutput {
	return o.ApplyT(func(v *IngressNginx) apiextensions.CustomResourceOutput { return v.Application }).(apiextensions.CustomResourceOutput)
}

// The ACM Certificates used for TLS encryption.
func (o IngressNginxOutput) Certificate() commons.CertificateOutput {
	return o.ApplyT(func(v *IngressNginx) commons.CertificateOutput { return v.Certificate }).(commons.CertificateOutput)
}

// The Namespace used to deploy the component.
func (o IngressNginxOutput) Namespace() corev1.NamespaceOutput {
	return o.ApplyT(func(v *IngressNginx) corev1.NamespaceOutput { return v.Namespace }).(corev1.NamespaceOutput)
}

type IngressNginxArrayOutput struct{ *pulumi.OutputState }

func (IngressNginxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngressNginx)(nil)).Elem()
}

func (o IngressNginxArrayOutput) ToIngressNginxArrayOutput() IngressNginxArrayOutput {
	return o
}

func (o IngressNginxArrayOutput) ToIngressNginxArrayOutputWithContext(ctx context.Context) IngressNginxArrayOutput {
	return o
}

func (o IngressNginxArrayOutput) Index(i pulumi.IntInput) IngressNginxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IngressNginx {
		return vs[0].([]*IngressNginx)[vs[1].(int)]
	}).(IngressNginxOutput)
}

type IngressNginxMapOutput struct{ *pulumi.OutputState }

func (IngressNginxMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngressNginx)(nil)).Elem()
}

func (o IngressNginxMapOutput) ToIngressNginxMapOutput() IngressNginxMapOutput {
	return o
}

func (o IngressNginxMapOutput) ToIngressNginxMapOutputWithContext(ctx context.Context) IngressNginxMapOutput {
	return o
}

func (o IngressNginxMapOutput) MapIndex(k pulumi.StringInput) IngressNginxOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IngressNginx {
		return vs[0].(map[string]*IngressNginx)[vs[1].(string)]
	}).(IngressNginxOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngressNginxInput)(nil)).Elem(), &IngressNginx{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressNginxArrayInput)(nil)).Elem(), IngressNginxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngressNginxMapInput)(nil)).Elem(), IngressNginxMap{})
	pulumi.RegisterOutputType(IngressNginxOutput{})
	pulumi.RegisterOutputType(IngressNginxArrayOutput{})
	pulumi.RegisterOutputType(IngressNginxMapOutput{})
}
