// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apiextensions"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/yaml"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Calico struct {
	pulumi.ResourceState

	Application     apiextensions.CustomResourceOutput `pulumi:"application"`
	Installation    apiextensions.CustomResourceOutput `pulumi:"installation"`
	InstallationCrd yaml.ConfigFileOutput              `pulumi:"installationCrd"`
	Namespace       corev1.NamespaceOutput             `pulumi:"namespace"`
}

// NewCalico registers a new resource with the given unique name, arguments, and options.
func NewCalico(ctx *pulumi.Context,
	name string, args *CalicoArgs, opts ...pulumi.ResourceOption) (*Calico, error) {
	if args == nil {
		args = &CalicoArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Calico
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:kubernetes:Calico", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type calicoArgs struct {
}

// The set of arguments for constructing a Calico resource.
type CalicoArgs struct {
}

func (CalicoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*calicoArgs)(nil)).Elem()
}

type CalicoInput interface {
	pulumi.Input

	ToCalicoOutput() CalicoOutput
	ToCalicoOutputWithContext(ctx context.Context) CalicoOutput
}

func (*Calico) ElementType() reflect.Type {
	return reflect.TypeOf((**Calico)(nil)).Elem()
}

func (i *Calico) ToCalicoOutput() CalicoOutput {
	return i.ToCalicoOutputWithContext(context.Background())
}

func (i *Calico) ToCalicoOutputWithContext(ctx context.Context) CalicoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalicoOutput)
}

// CalicoArrayInput is an input type that accepts CalicoArray and CalicoArrayOutput values.
// You can construct a concrete instance of `CalicoArrayInput` via:
//
//	CalicoArray{ CalicoArgs{...} }
type CalicoArrayInput interface {
	pulumi.Input

	ToCalicoArrayOutput() CalicoArrayOutput
	ToCalicoArrayOutputWithContext(context.Context) CalicoArrayOutput
}

type CalicoArray []CalicoInput

func (CalicoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Calico)(nil)).Elem()
}

func (i CalicoArray) ToCalicoArrayOutput() CalicoArrayOutput {
	return i.ToCalicoArrayOutputWithContext(context.Background())
}

func (i CalicoArray) ToCalicoArrayOutputWithContext(ctx context.Context) CalicoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalicoArrayOutput)
}

// CalicoMapInput is an input type that accepts CalicoMap and CalicoMapOutput values.
// You can construct a concrete instance of `CalicoMapInput` via:
//
//	CalicoMap{ "key": CalicoArgs{...} }
type CalicoMapInput interface {
	pulumi.Input

	ToCalicoMapOutput() CalicoMapOutput
	ToCalicoMapOutputWithContext(context.Context) CalicoMapOutput
}

type CalicoMap map[string]CalicoInput

func (CalicoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Calico)(nil)).Elem()
}

func (i CalicoMap) ToCalicoMapOutput() CalicoMapOutput {
	return i.ToCalicoMapOutputWithContext(context.Background())
}

func (i CalicoMap) ToCalicoMapOutputWithContext(ctx context.Context) CalicoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CalicoMapOutput)
}

type CalicoOutput struct{ *pulumi.OutputState }

func (CalicoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Calico)(nil)).Elem()
}

func (o CalicoOutput) ToCalicoOutput() CalicoOutput {
	return o
}

func (o CalicoOutput) ToCalicoOutputWithContext(ctx context.Context) CalicoOutput {
	return o
}

func (o CalicoOutput) Application() apiextensions.CustomResourceOutput {
	return o.ApplyT(func(v *Calico) apiextensions.CustomResourceOutput { return v.Application }).(apiextensions.CustomResourceOutput)
}

func (o CalicoOutput) Installation() apiextensions.CustomResourceOutput {
	return o.ApplyT(func(v *Calico) apiextensions.CustomResourceOutput { return v.Installation }).(apiextensions.CustomResourceOutput)
}

func (o CalicoOutput) InstallationCrd() yaml.ConfigFileOutput {
	return o.ApplyT(func(v *Calico) yaml.ConfigFileOutput { return v.InstallationCrd }).(yaml.ConfigFileOutput)
}

func (o CalicoOutput) Namespace() corev1.NamespaceOutput {
	return o.ApplyT(func(v *Calico) corev1.NamespaceOutput { return v.Namespace }).(corev1.NamespaceOutput)
}

type CalicoArrayOutput struct{ *pulumi.OutputState }

func (CalicoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Calico)(nil)).Elem()
}

func (o CalicoArrayOutput) ToCalicoArrayOutput() CalicoArrayOutput {
	return o
}

func (o CalicoArrayOutput) ToCalicoArrayOutputWithContext(ctx context.Context) CalicoArrayOutput {
	return o
}

func (o CalicoArrayOutput) Index(i pulumi.IntInput) CalicoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Calico {
		return vs[0].([]*Calico)[vs[1].(int)]
	}).(CalicoOutput)
}

type CalicoMapOutput struct{ *pulumi.OutputState }

func (CalicoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Calico)(nil)).Elem()
}

func (o CalicoMapOutput) ToCalicoMapOutput() CalicoMapOutput {
	return o
}

func (o CalicoMapOutput) ToCalicoMapOutputWithContext(ctx context.Context) CalicoMapOutput {
	return o
}

func (o CalicoMapOutput) MapIndex(k pulumi.StringInput) CalicoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Calico {
		return vs[0].(map[string]*Calico)[vs[1].(string)]
	}).(CalicoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CalicoInput)(nil)).Elem(), &Calico{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalicoArrayInput)(nil)).Elem(), CalicoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CalicoMapInput)(nil)).Elem(), CalicoMap{})
	pulumi.RegisterOutputType(CalicoOutput{})
	pulumi.RegisterOutputType(CalicoArrayOutput{})
	pulumi.RegisterOutputType(CalicoMapOutput{})
}
