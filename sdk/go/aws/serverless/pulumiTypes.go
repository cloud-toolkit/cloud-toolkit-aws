// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package serverless

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CdnCache struct {
	// Cloud Front distribution cache time to live
	Ttl float64 `pulumi:"ttl"`
}

// CdnCacheInput is an input type that accepts CdnCacheArgs and CdnCacheOutput values.
// You can construct a concrete instance of `CdnCacheInput` via:
//
//	CdnCacheArgs{...}
type CdnCacheInput interface {
	pulumi.Input

	ToCdnCacheOutput() CdnCacheOutput
	ToCdnCacheOutputWithContext(context.Context) CdnCacheOutput
}

type CdnCacheArgs struct {
	// Cloud Front distribution cache time to live
	Ttl pulumi.Float64Input `pulumi:"ttl"`
}

func (CdnCacheArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnCache)(nil)).Elem()
}

func (i CdnCacheArgs) ToCdnCacheOutput() CdnCacheOutput {
	return i.ToCdnCacheOutputWithContext(context.Background())
}

func (i CdnCacheArgs) ToCdnCacheOutputWithContext(ctx context.Context) CdnCacheOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnCacheOutput)
}

func (i CdnCacheArgs) ToCdnCachePtrOutput() CdnCachePtrOutput {
	return i.ToCdnCachePtrOutputWithContext(context.Background())
}

func (i CdnCacheArgs) ToCdnCachePtrOutputWithContext(ctx context.Context) CdnCachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnCacheOutput).ToCdnCachePtrOutputWithContext(ctx)
}

// CdnCachePtrInput is an input type that accepts CdnCacheArgs, CdnCachePtr and CdnCachePtrOutput values.
// You can construct a concrete instance of `CdnCachePtrInput` via:
//
//	        CdnCacheArgs{...}
//
//	or:
//
//	        nil
type CdnCachePtrInput interface {
	pulumi.Input

	ToCdnCachePtrOutput() CdnCachePtrOutput
	ToCdnCachePtrOutputWithContext(context.Context) CdnCachePtrOutput
}

type cdnCachePtrType CdnCacheArgs

func CdnCachePtr(v *CdnCacheArgs) CdnCachePtrInput {
	return (*cdnCachePtrType)(v)
}

func (*cdnCachePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnCache)(nil)).Elem()
}

func (i *cdnCachePtrType) ToCdnCachePtrOutput() CdnCachePtrOutput {
	return i.ToCdnCachePtrOutputWithContext(context.Background())
}

func (i *cdnCachePtrType) ToCdnCachePtrOutputWithContext(ctx context.Context) CdnCachePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnCachePtrOutput)
}

type CdnCacheOutput struct{ *pulumi.OutputState }

func (CdnCacheOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnCache)(nil)).Elem()
}

func (o CdnCacheOutput) ToCdnCacheOutput() CdnCacheOutput {
	return o
}

func (o CdnCacheOutput) ToCdnCacheOutputWithContext(ctx context.Context) CdnCacheOutput {
	return o
}

func (o CdnCacheOutput) ToCdnCachePtrOutput() CdnCachePtrOutput {
	return o.ToCdnCachePtrOutputWithContext(context.Background())
}

func (o CdnCacheOutput) ToCdnCachePtrOutputWithContext(ctx context.Context) CdnCachePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CdnCache) *CdnCache {
		return &v
	}).(CdnCachePtrOutput)
}

// Cloud Front distribution cache time to live
func (o CdnCacheOutput) Ttl() pulumi.Float64Output {
	return o.ApplyT(func(v CdnCache) float64 { return v.Ttl }).(pulumi.Float64Output)
}

type CdnCachePtrOutput struct{ *pulumi.OutputState }

func (CdnCachePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnCache)(nil)).Elem()
}

func (o CdnCachePtrOutput) ToCdnCachePtrOutput() CdnCachePtrOutput {
	return o
}

func (o CdnCachePtrOutput) ToCdnCachePtrOutputWithContext(ctx context.Context) CdnCachePtrOutput {
	return o
}

func (o CdnCachePtrOutput) Elem() CdnCacheOutput {
	return o.ApplyT(func(v *CdnCache) CdnCache {
		if v != nil {
			return *v
		}
		var ret CdnCache
		return ret
	}).(CdnCacheOutput)
}

// Cloud Front distribution cache time to live
func (o CdnCachePtrOutput) Ttl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CdnCache) *float64 {
		if v == nil {
			return nil
		}
		return &v.Ttl
	}).(pulumi.Float64PtrOutput)
}

type CdnDns struct {
	// DNS time to live
	Ttl float64 `pulumi:"ttl"`
}

// CdnDnsInput is an input type that accepts CdnDnsArgs and CdnDnsOutput values.
// You can construct a concrete instance of `CdnDnsInput` via:
//
//	CdnDnsArgs{...}
type CdnDnsInput interface {
	pulumi.Input

	ToCdnDnsOutput() CdnDnsOutput
	ToCdnDnsOutputWithContext(context.Context) CdnDnsOutput
}

type CdnDnsArgs struct {
	// DNS time to live
	Ttl pulumi.Float64Input `pulumi:"ttl"`
}

func (CdnDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDns)(nil)).Elem()
}

func (i CdnDnsArgs) ToCdnDnsOutput() CdnDnsOutput {
	return i.ToCdnDnsOutputWithContext(context.Background())
}

func (i CdnDnsArgs) ToCdnDnsOutputWithContext(ctx context.Context) CdnDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDnsOutput)
}

func (i CdnDnsArgs) ToCdnDnsPtrOutput() CdnDnsPtrOutput {
	return i.ToCdnDnsPtrOutputWithContext(context.Background())
}

func (i CdnDnsArgs) ToCdnDnsPtrOutputWithContext(ctx context.Context) CdnDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDnsOutput).ToCdnDnsPtrOutputWithContext(ctx)
}

// CdnDnsPtrInput is an input type that accepts CdnDnsArgs, CdnDnsPtr and CdnDnsPtrOutput values.
// You can construct a concrete instance of `CdnDnsPtrInput` via:
//
//	        CdnDnsArgs{...}
//
//	or:
//
//	        nil
type CdnDnsPtrInput interface {
	pulumi.Input

	ToCdnDnsPtrOutput() CdnDnsPtrOutput
	ToCdnDnsPtrOutputWithContext(context.Context) CdnDnsPtrOutput
}

type cdnDnsPtrType CdnDnsArgs

func CdnDnsPtr(v *CdnDnsArgs) CdnDnsPtrInput {
	return (*cdnDnsPtrType)(v)
}

func (*cdnDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDns)(nil)).Elem()
}

func (i *cdnDnsPtrType) ToCdnDnsPtrOutput() CdnDnsPtrOutput {
	return i.ToCdnDnsPtrOutputWithContext(context.Background())
}

func (i *cdnDnsPtrType) ToCdnDnsPtrOutputWithContext(ctx context.Context) CdnDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnDnsPtrOutput)
}

type CdnDnsOutput struct{ *pulumi.OutputState }

func (CdnDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdnDns)(nil)).Elem()
}

func (o CdnDnsOutput) ToCdnDnsOutput() CdnDnsOutput {
	return o
}

func (o CdnDnsOutput) ToCdnDnsOutputWithContext(ctx context.Context) CdnDnsOutput {
	return o
}

func (o CdnDnsOutput) ToCdnDnsPtrOutput() CdnDnsPtrOutput {
	return o.ToCdnDnsPtrOutputWithContext(context.Background())
}

func (o CdnDnsOutput) ToCdnDnsPtrOutputWithContext(ctx context.Context) CdnDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CdnDns) *CdnDns {
		return &v
	}).(CdnDnsPtrOutput)
}

// DNS time to live
func (o CdnDnsOutput) Ttl() pulumi.Float64Output {
	return o.ApplyT(func(v CdnDns) float64 { return v.Ttl }).(pulumi.Float64Output)
}

type CdnDnsPtrOutput struct{ *pulumi.OutputState }

func (CdnDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnDns)(nil)).Elem()
}

func (o CdnDnsPtrOutput) ToCdnDnsPtrOutput() CdnDnsPtrOutput {
	return o
}

func (o CdnDnsPtrOutput) ToCdnDnsPtrOutputWithContext(ctx context.Context) CdnDnsPtrOutput {
	return o
}

func (o CdnDnsPtrOutput) Elem() CdnDnsOutput {
	return o.ApplyT(func(v *CdnDns) CdnDns {
		if v != nil {
			return *v
		}
		var ret CdnDns
		return ret
	}).(CdnDnsOutput)
}

// DNS time to live
func (o CdnDnsPtrOutput) Ttl() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CdnDns) *float64 {
		if v == nil {
			return nil
		}
		return &v.Ttl
	}).(pulumi.Float64PtrOutput)
}

type DNSRecords struct {
	DomainRecord    *route53.Record `pulumi:"domainRecord"`
	WwwDomainRecord *route53.Record `pulumi:"wwwDomainRecord"`
}

type DNSRecordsOutput struct{ *pulumi.OutputState }

func (DNSRecordsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DNSRecords)(nil)).Elem()
}

func (o DNSRecordsOutput) ToDNSRecordsOutput() DNSRecordsOutput {
	return o
}

func (o DNSRecordsOutput) ToDNSRecordsOutputWithContext(ctx context.Context) DNSRecordsOutput {
	return o
}

func (o DNSRecordsOutput) DomainRecord() route53.RecordOutput {
	return o.ApplyT(func(v DNSRecords) *route53.Record { return v.DomainRecord }).(route53.RecordOutput)
}

func (o DNSRecordsOutput) WwwDomainRecord() route53.RecordOutput {
	return o.ApplyT(func(v DNSRecords) *route53.Record { return v.WwwDomainRecord }).(route53.RecordOutput)
}

type DNSRecordsPtrOutput struct{ *pulumi.OutputState }

func (DNSRecordsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DNSRecords)(nil)).Elem()
}

func (o DNSRecordsPtrOutput) ToDNSRecordsPtrOutput() DNSRecordsPtrOutput {
	return o
}

func (o DNSRecordsPtrOutput) ToDNSRecordsPtrOutputWithContext(ctx context.Context) DNSRecordsPtrOutput {
	return o
}

func (o DNSRecordsPtrOutput) Elem() DNSRecordsOutput {
	return o.ApplyT(func(v *DNSRecords) DNSRecords {
		if v != nil {
			return *v
		}
		var ret DNSRecords
		return ret
	}).(DNSRecordsOutput)
}

func (o DNSRecordsPtrOutput) DomainRecord() route53.RecordOutput {
	return o.ApplyT(func(v *DNSRecords) *route53.Record {
		if v == nil {
			return nil
		}
		return v.DomainRecord
	}).(route53.RecordOutput)
}

func (o DNSRecordsPtrOutput) WwwDomainRecord() route53.RecordOutput {
	return o.ApplyT(func(v *DNSRecords) *route53.Record {
		if v == nil {
			return nil
		}
		return v.WwwDomainRecord
	}).(route53.RecordOutput)
}

type DeadLetterQueueType struct {
	// Enables the feature.
	Enable bool `pulumi:"enable"`
	// Placing a Queue ARN will set said already existing Queue as a Dead Letter Queue for the new one.
	ExistingDeadLetterQueueArn *string `pulumi:"existingDeadLetterQueueArn"`
	// The amount of time that a message will be stored in the Dead Letter Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
	MessageRetentionSeconds *float64 `pulumi:"messageRetentionSeconds"`
	// Dead Letter Queue type attached to the component to create.
	Type DeadLetterQueueTypes `pulumi:"type"`
}

// DeadLetterQueueTypeInput is an input type that accepts DeadLetterQueueTypeArgs and DeadLetterQueueTypeOutput values.
// You can construct a concrete instance of `DeadLetterQueueTypeInput` via:
//
//	DeadLetterQueueTypeArgs{...}
type DeadLetterQueueTypeInput interface {
	pulumi.Input

	ToDeadLetterQueueTypeOutput() DeadLetterQueueTypeOutput
	ToDeadLetterQueueTypeOutputWithContext(context.Context) DeadLetterQueueTypeOutput
}

type DeadLetterQueueTypeArgs struct {
	// Enables the feature.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Placing a Queue ARN will set said already existing Queue as a Dead Letter Queue for the new one.
	ExistingDeadLetterQueueArn pulumi.StringPtrInput `pulumi:"existingDeadLetterQueueArn"`
	// The amount of time that a message will be stored in the Dead Letter Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
	MessageRetentionSeconds pulumi.Float64PtrInput `pulumi:"messageRetentionSeconds"`
	// Dead Letter Queue type attached to the component to create.
	Type DeadLetterQueueTypesInput `pulumi:"type"`
}

func (DeadLetterQueueTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterQueueType)(nil)).Elem()
}

func (i DeadLetterQueueTypeArgs) ToDeadLetterQueueTypeOutput() DeadLetterQueueTypeOutput {
	return i.ToDeadLetterQueueTypeOutputWithContext(context.Background())
}

func (i DeadLetterQueueTypeArgs) ToDeadLetterQueueTypeOutputWithContext(ctx context.Context) DeadLetterQueueTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterQueueTypeOutput)
}

func (i DeadLetterQueueTypeArgs) ToDeadLetterQueueTypePtrOutput() DeadLetterQueueTypePtrOutput {
	return i.ToDeadLetterQueueTypePtrOutputWithContext(context.Background())
}

func (i DeadLetterQueueTypeArgs) ToDeadLetterQueueTypePtrOutputWithContext(ctx context.Context) DeadLetterQueueTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterQueueTypeOutput).ToDeadLetterQueueTypePtrOutputWithContext(ctx)
}

// DeadLetterQueueTypePtrInput is an input type that accepts DeadLetterQueueTypeArgs, DeadLetterQueueTypePtr and DeadLetterQueueTypePtrOutput values.
// You can construct a concrete instance of `DeadLetterQueueTypePtrInput` via:
//
//	        DeadLetterQueueTypeArgs{...}
//
//	or:
//
//	        nil
type DeadLetterQueueTypePtrInput interface {
	pulumi.Input

	ToDeadLetterQueueTypePtrOutput() DeadLetterQueueTypePtrOutput
	ToDeadLetterQueueTypePtrOutputWithContext(context.Context) DeadLetterQueueTypePtrOutput
}

type deadLetterQueueTypePtrType DeadLetterQueueTypeArgs

func DeadLetterQueueTypePtr(v *DeadLetterQueueTypeArgs) DeadLetterQueueTypePtrInput {
	return (*deadLetterQueueTypePtrType)(v)
}

func (*deadLetterQueueTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterQueueType)(nil)).Elem()
}

func (i *deadLetterQueueTypePtrType) ToDeadLetterQueueTypePtrOutput() DeadLetterQueueTypePtrOutput {
	return i.ToDeadLetterQueueTypePtrOutputWithContext(context.Background())
}

func (i *deadLetterQueueTypePtrType) ToDeadLetterQueueTypePtrOutputWithContext(ctx context.Context) DeadLetterQueueTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeadLetterQueueTypePtrOutput)
}

type DeadLetterQueueTypeOutput struct{ *pulumi.OutputState }

func (DeadLetterQueueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeadLetterQueueType)(nil)).Elem()
}

func (o DeadLetterQueueTypeOutput) ToDeadLetterQueueTypeOutput() DeadLetterQueueTypeOutput {
	return o
}

func (o DeadLetterQueueTypeOutput) ToDeadLetterQueueTypeOutputWithContext(ctx context.Context) DeadLetterQueueTypeOutput {
	return o
}

func (o DeadLetterQueueTypeOutput) ToDeadLetterQueueTypePtrOutput() DeadLetterQueueTypePtrOutput {
	return o.ToDeadLetterQueueTypePtrOutputWithContext(context.Background())
}

func (o DeadLetterQueueTypeOutput) ToDeadLetterQueueTypePtrOutputWithContext(ctx context.Context) DeadLetterQueueTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeadLetterQueueType) *DeadLetterQueueType {
		return &v
	}).(DeadLetterQueueTypePtrOutput)
}

// Enables the feature.
func (o DeadLetterQueueTypeOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v DeadLetterQueueType) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Placing a Queue ARN will set said already existing Queue as a Dead Letter Queue for the new one.
func (o DeadLetterQueueTypeOutput) ExistingDeadLetterQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeadLetterQueueType) *string { return v.ExistingDeadLetterQueueArn }).(pulumi.StringPtrOutput)
}

// The amount of time that a message will be stored in the Dead Letter Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
func (o DeadLetterQueueTypeOutput) MessageRetentionSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DeadLetterQueueType) *float64 { return v.MessageRetentionSeconds }).(pulumi.Float64PtrOutput)
}

// Dead Letter Queue type attached to the component to create.
func (o DeadLetterQueueTypeOutput) Type() DeadLetterQueueTypesOutput {
	return o.ApplyT(func(v DeadLetterQueueType) DeadLetterQueueTypes { return v.Type }).(DeadLetterQueueTypesOutput)
}

type DeadLetterQueueTypePtrOutput struct{ *pulumi.OutputState }

func (DeadLetterQueueTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeadLetterQueueType)(nil)).Elem()
}

func (o DeadLetterQueueTypePtrOutput) ToDeadLetterQueueTypePtrOutput() DeadLetterQueueTypePtrOutput {
	return o
}

func (o DeadLetterQueueTypePtrOutput) ToDeadLetterQueueTypePtrOutputWithContext(ctx context.Context) DeadLetterQueueTypePtrOutput {
	return o
}

func (o DeadLetterQueueTypePtrOutput) Elem() DeadLetterQueueTypeOutput {
	return o.ApplyT(func(v *DeadLetterQueueType) DeadLetterQueueType {
		if v != nil {
			return *v
		}
		var ret DeadLetterQueueType
		return ret
	}).(DeadLetterQueueTypeOutput)
}

// Enables the feature.
func (o DeadLetterQueueTypePtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeadLetterQueueType) *bool {
		if v == nil {
			return nil
		}
		return &v.Enable
	}).(pulumi.BoolPtrOutput)
}

// Placing a Queue ARN will set said already existing Queue as a Dead Letter Queue for the new one.
func (o DeadLetterQueueTypePtrOutput) ExistingDeadLetterQueueArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeadLetterQueueType) *string {
		if v == nil {
			return nil
		}
		return v.ExistingDeadLetterQueueArn
	}).(pulumi.StringPtrOutput)
}

// The amount of time that a message will be stored in the Dead Letter Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
func (o DeadLetterQueueTypePtrOutput) MessageRetentionSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DeadLetterQueueType) *float64 {
		if v == nil {
			return nil
		}
		return v.MessageRetentionSeconds
	}).(pulumi.Float64PtrOutput)
}

// Dead Letter Queue type attached to the component to create.
func (o DeadLetterQueueTypePtrOutput) Type() DeadLetterQueueTypesPtrOutput {
	return o.ApplyT(func(v *DeadLetterQueueType) *DeadLetterQueueTypes {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(DeadLetterQueueTypesPtrOutput)
}

type QueueType struct {
	// Dead Letter Queue attached to the component to create.
	DeadLetterQueueTypeArgs *DeadLetterQueueType `pulumi:"DeadLetterQueueTypeArgs"`
	// Set to true to create the Queue as FiFo. False for a Standard Queue.
	IsFifo *bool `pulumi:"isFifo"`
	// The limit for a Queue message size in bytes. Minimum is 1 byte (1 character) and Maximum 262,144 bytes (256 KiB). By default a message can be 256 KiB large.
	MaxMessageSize *float64 `pulumi:"maxMessageSize"`
	// The amount of time that a message will be stored in the Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
	MessageRetentionSeconds *float64 `pulumi:"messageRetentionSeconds"`
	// Custom policy for the Queue.
	Policy *string `pulumi:"policy"`
}

// QueueTypeInput is an input type that accepts QueueTypeArgs and QueueTypeOutput values.
// You can construct a concrete instance of `QueueTypeInput` via:
//
//	QueueTypeArgs{...}
type QueueTypeInput interface {
	pulumi.Input

	ToQueueTypeOutput() QueueTypeOutput
	ToQueueTypeOutputWithContext(context.Context) QueueTypeOutput
}

type QueueTypeArgs struct {
	// Dead Letter Queue attached to the component to create.
	DeadLetterQueueTypeArgs DeadLetterQueueTypePtrInput `pulumi:"DeadLetterQueueTypeArgs"`
	// Set to true to create the Queue as FiFo. False for a Standard Queue.
	IsFifo pulumi.BoolPtrInput `pulumi:"isFifo"`
	// The limit for a Queue message size in bytes. Minimum is 1 byte (1 character) and Maximum 262,144 bytes (256 KiB). By default a message can be 256 KiB large.
	MaxMessageSize pulumi.Float64PtrInput `pulumi:"maxMessageSize"`
	// The amount of time that a message will be stored in the Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
	MessageRetentionSeconds pulumi.Float64PtrInput `pulumi:"messageRetentionSeconds"`
	// Custom policy for the Queue.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (QueueTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueType)(nil)).Elem()
}

func (i QueueTypeArgs) ToQueueTypeOutput() QueueTypeOutput {
	return i.ToQueueTypeOutputWithContext(context.Background())
}

func (i QueueTypeArgs) ToQueueTypeOutputWithContext(ctx context.Context) QueueTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueTypeOutput)
}

func (i QueueTypeArgs) ToQueueTypePtrOutput() QueueTypePtrOutput {
	return i.ToQueueTypePtrOutputWithContext(context.Background())
}

func (i QueueTypeArgs) ToQueueTypePtrOutputWithContext(ctx context.Context) QueueTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueTypeOutput).ToQueueTypePtrOutputWithContext(ctx)
}

// QueueTypePtrInput is an input type that accepts QueueTypeArgs, QueueTypePtr and QueueTypePtrOutput values.
// You can construct a concrete instance of `QueueTypePtrInput` via:
//
//	        QueueTypeArgs{...}
//
//	or:
//
//	        nil
type QueueTypePtrInput interface {
	pulumi.Input

	ToQueueTypePtrOutput() QueueTypePtrOutput
	ToQueueTypePtrOutputWithContext(context.Context) QueueTypePtrOutput
}

type queueTypePtrType QueueTypeArgs

func QueueTypePtr(v *QueueTypeArgs) QueueTypePtrInput {
	return (*queueTypePtrType)(v)
}

func (*queueTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueType)(nil)).Elem()
}

func (i *queueTypePtrType) ToQueueTypePtrOutput() QueueTypePtrOutput {
	return i.ToQueueTypePtrOutputWithContext(context.Background())
}

func (i *queueTypePtrType) ToQueueTypePtrOutputWithContext(ctx context.Context) QueueTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueTypePtrOutput)
}

type QueueTypeOutput struct{ *pulumi.OutputState }

func (QueueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueType)(nil)).Elem()
}

func (o QueueTypeOutput) ToQueueTypeOutput() QueueTypeOutput {
	return o
}

func (o QueueTypeOutput) ToQueueTypeOutputWithContext(ctx context.Context) QueueTypeOutput {
	return o
}

func (o QueueTypeOutput) ToQueueTypePtrOutput() QueueTypePtrOutput {
	return o.ToQueueTypePtrOutputWithContext(context.Background())
}

func (o QueueTypeOutput) ToQueueTypePtrOutputWithContext(ctx context.Context) QueueTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueueType) *QueueType {
		return &v
	}).(QueueTypePtrOutput)
}

// Dead Letter Queue attached to the component to create.
func (o QueueTypeOutput) DeadLetterQueueTypeArgs() DeadLetterQueueTypePtrOutput {
	return o.ApplyT(func(v QueueType) *DeadLetterQueueType { return v.DeadLetterQueueTypeArgs }).(DeadLetterQueueTypePtrOutput)
}

// Set to true to create the Queue as FiFo. False for a Standard Queue.
func (o QueueTypeOutput) IsFifo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueType) *bool { return v.IsFifo }).(pulumi.BoolPtrOutput)
}

// The limit for a Queue message size in bytes. Minimum is 1 byte (1 character) and Maximum 262,144 bytes (256 KiB). By default a message can be 256 KiB large.
func (o QueueTypeOutput) MaxMessageSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v QueueType) *float64 { return v.MaxMessageSize }).(pulumi.Float64PtrOutput)
}

// The amount of time that a message will be stored in the Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
func (o QueueTypeOutput) MessageRetentionSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v QueueType) *float64 { return v.MessageRetentionSeconds }).(pulumi.Float64PtrOutput)
}

// Custom policy for the Queue.
func (o QueueTypeOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueType) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type QueueTypePtrOutput struct{ *pulumi.OutputState }

func (QueueTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueType)(nil)).Elem()
}

func (o QueueTypePtrOutput) ToQueueTypePtrOutput() QueueTypePtrOutput {
	return o
}

func (o QueueTypePtrOutput) ToQueueTypePtrOutputWithContext(ctx context.Context) QueueTypePtrOutput {
	return o
}

func (o QueueTypePtrOutput) Elem() QueueTypeOutput {
	return o.ApplyT(func(v *QueueType) QueueType {
		if v != nil {
			return *v
		}
		var ret QueueType
		return ret
	}).(QueueTypeOutput)
}

// Dead Letter Queue attached to the component to create.
func (o QueueTypePtrOutput) DeadLetterQueueTypeArgs() DeadLetterQueueTypePtrOutput {
	return o.ApplyT(func(v *QueueType) *DeadLetterQueueType {
		if v == nil {
			return nil
		}
		return v.DeadLetterQueueTypeArgs
	}).(DeadLetterQueueTypePtrOutput)
}

// Set to true to create the Queue as FiFo. False for a Standard Queue.
func (o QueueTypePtrOutput) IsFifo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueType) *bool {
		if v == nil {
			return nil
		}
		return v.IsFifo
	}).(pulumi.BoolPtrOutput)
}

// The limit for a Queue message size in bytes. Minimum is 1 byte (1 character) and Maximum 262,144 bytes (256 KiB). By default a message can be 256 KiB large.
func (o QueueTypePtrOutput) MaxMessageSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *QueueType) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxMessageSize
	}).(pulumi.Float64PtrOutput)
}

// The amount of time that a message will be stored in the Queue without being deleted. Minimum is 60 seconds (1 minutes) and Maximum 1,209,600 (14 days) seconds. By default a message is retained 4 days.
func (o QueueTypePtrOutput) MessageRetentionSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *QueueType) *float64 {
		if v == nil {
			return nil
		}
		return v.MessageRetentionSeconds
	}).(pulumi.Float64PtrOutput)
}

// Custom policy for the Queue.
func (o QueueTypePtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueType) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

type StaticWebType struct {
	// Cloud Front distribution cache
	Cache *CdnCache `pulumi:"cache"`
	// Set to true to configure DNS
	ConfigureDNS *bool `pulumi:"configureDNS"`
	// DNS configuration
	Dns *CdnDns `pulumi:"dns"`
	// Set to true to add an alias to wwww.<domain>
	Domain *string `pulumi:"domain"`
	// Set to true to add an alias to wwww.<domain>
	IncludeWWW *bool `pulumi:"includeWWW"`
	// Cloud Front distribution priceClass
	PriceClass *string `pulumi:"priceClass"`
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdnCacheInput)(nil)).Elem(), CdnCacheArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnCachePtrInput)(nil)).Elem(), CdnCacheArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDnsInput)(nil)).Elem(), CdnDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnDnsPtrInput)(nil)).Elem(), CdnDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeadLetterQueueTypeInput)(nil)).Elem(), DeadLetterQueueTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeadLetterQueueTypePtrInput)(nil)).Elem(), DeadLetterQueueTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueTypeInput)(nil)).Elem(), QueueTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueTypePtrInput)(nil)).Elem(), QueueTypeArgs{})
	pulumi.RegisterOutputType(CdnCacheOutput{})
	pulumi.RegisterOutputType(CdnCachePtrOutput{})
	pulumi.RegisterOutputType(CdnDnsOutput{})
	pulumi.RegisterOutputType(CdnDnsPtrOutput{})
	pulumi.RegisterOutputType(DNSRecordsOutput{})
	pulumi.RegisterOutputType(DNSRecordsPtrOutput{})
	pulumi.RegisterOutputType(DeadLetterQueueTypeOutput{})
	pulumi.RegisterOutputType(DeadLetterQueueTypePtrOutput{})
	pulumi.RegisterOutputType(QueueTypeOutput{})
	pulumi.RegisterOutputType(QueueTypePtrOutput{})
}
