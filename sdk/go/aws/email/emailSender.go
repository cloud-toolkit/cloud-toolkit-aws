// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package email

import (
	"context"
	"reflect"

	"github.com/cloud-toolkit/cloud-toolkit-aws/sdk/go/aws/serverless"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/resourcegroups"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ses"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/sns"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/sqs"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Cloud Toolkit component for an Email Sender. Creates a Simple Email Service Email or Domain Identity alongside Simple Notification Service Topics and Simple Queue Service Queues to manage bounce, complaints or delivered messages.
// In the case of building a Domain Identity, if it is registered in the Route 53 on the AWS account that is applying the infrastructure changes, Cloud Toolkit can verify it automatically by creating the DKIM DNS Records.
type EmailSender struct {
	pulumi.ResourceState

	// Address of the Identity, regardless if it is a Domain or an Email.
	Address pulumi.StringOutput `pulumi:"address"`
	// Additional SQS Queues subscribed to the SNS Topic that receives bounced emails. These Queues were created outside the Email Sender component.
	BounceAdditionalQueues AdditionalQueueArrayOutput `pulumi:"bounceAdditionalQueues"`
	// Queue Policies attached to the externally provided Bounce SQS Queues.
	BounceAdditionalQueuesPolicies sqs.QueuePolicyArrayOutput `pulumi:"bounceAdditionalQueuesPolicies"`
	// Identity Notification Topic for bounced emails.
	BounceIdentityNotificationTopic ses.IdentityNotificationTopicOutput `pulumi:"bounceIdentityNotificationTopic"`
	// SQS Queues subscribed to the SNS Topic that receives bounced emails. These Queues were created automatically by the Email Sender component.
	BounceQueues serverless.QueueArrayOutput `pulumi:"bounceQueues"`
	// SNS Topic for bounced emails.
	BounceTopic sns.TopicOutput `pulumi:"bounceTopic"`
	// SNS subscriptions of the SQS Queues to the Bounce SNS Topic.
	BounceTopicSubscriptions sns.TopicSubscriptionArrayOutput `pulumi:"bounceTopicSubscriptions"`
	// Additional SQS Queues subscribed to the SNS Topic that receives complained emails. These Queues were created outside the Email Sender component.
	ComplaintAdditionalQueues AdditionalQueueArrayOutput `pulumi:"complaintAdditionalQueues"`
	// Queue Policies attached to the externally provided Complaint SQS Queues.
	ComplaintAdditionalQueuesPolicies sqs.QueuePolicyArrayOutput `pulumi:"complaintAdditionalQueuesPolicies"`
	// Identity Notification Topic for complained emails.
	ComplaintIdentityNotificationTopic ses.IdentityNotificationTopicOutput `pulumi:"complaintIdentityNotificationTopic"`
	// SQS Queues subscribed to the SNS Topic that receives complained emails. These Queues were created automatically by the Email Sender component.
	ComplaintQueues serverless.QueueArrayOutput `pulumi:"complaintQueues"`
	// SNS Topic for complained emails.
	ComplaintTopic sns.TopicOutput `pulumi:"complaintTopic"`
	// SNS subscriptions of the SQS Queues to the Complaint SNS Topic.
	ComplaintTopicSubscriptions sns.TopicSubscriptionArrayOutput `pulumi:"complaintTopicSubscriptions"`
	// Additional SQS Queues subscribed to the SNS Topic that receives delivered emails. These Queues were created outside the Email Sender component.
	DeliveryAdditionalQueues AdditionalQueueArrayOutput `pulumi:"deliveryAdditionalQueues"`
	// Queue Policies attached to the externally provided Delivery SQS Queues.
	DeliveryAdditionalQueuesPolicies sqs.QueuePolicyArrayOutput `pulumi:"deliveryAdditionalQueuesPolicies"`
	// Identity Notification Topic for delivered emails.
	DeliveryIdentityNotificationTopic ses.IdentityNotificationTopicOutput `pulumi:"deliveryIdentityNotificationTopic"`
	// SQS Queues subscribed to the SNS Topic that receives delivered emails. These Queues were created automatically by the Email Sender component.
	DeliveryQueues serverless.QueueArrayOutput `pulumi:"deliveryQueues"`
	// SNS Topic for delivered emails.
	DeliveryTopic sns.TopicOutput `pulumi:"deliveryTopic"`
	// SNS subscriptions of the SQS Queues to the Delivery SNS Topic.
	DeliveryTopicSubscriptions sns.TopicSubscriptionArrayOutput `pulumi:"deliveryTopicSubscriptions"`
	// DNS DKIM Records. Only applies for Domain Identities.
	DnsDkimRecords DnsDkimRecordArrayOutput `pulumi:"dnsDkimRecords"`
	// DNS records stored in the Domain registration in Route 53. Only applies for Domain Identities that are registered using Route 53.
	DnsRecords route53.RecordArrayOutput `pulumi:"dnsRecords"`
	// DNS zone identifier in Route 53 for the Domain. Only applies for Domain Identities that are registered using Route 53.
	DnsZoneId pulumi.StringPtrOutput `pulumi:"dnsZoneId"`
	// Domain DKIM. Only applies for Domain Identities.
	DomainDKIM ses.DomainDkimOutput `pulumi:"domainDKIM"`
	// Domain Identity component. Left blank if an Email Identity was used instead.
	DomainIdentity ses.DomainIdentityOutput `pulumi:"domainIdentity"`
	// Email Identity component. Left blank if a Domain Identity was used instead.
	EmailIdentity ses.EmailIdentityOutput `pulumi:"emailIdentity"`
	// Policy that when attached to an user, allows them to read the notification messages in the Queues.
	NotificationsPolicy iam.PolicyOutput `pulumi:"notificationsPolicy"`
	// Resource Groups that contain the underlying components such as Topics or Queues that belong to the Email Sender.
	ResourceGroups resourcegroups.GroupArrayOutput `pulumi:"resourceGroups"`
	// Policy that when attached to an user, allows them to send messages using the Email Sender Identity.
	SenderPolicy iam.PolicyOutput `pulumi:"senderPolicy"`
}

// NewEmailSender registers a new resource with the given unique name, arguments, and options.
func NewEmailSender(ctx *pulumi.Context,
	name string, args *EmailSenderArgs, opts ...pulumi.ResourceOption) (*EmailSender, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EmailSender
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:email:EmailSender", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type emailSenderArgs struct {
	// Arguments to manage incoming Bounce notifications.
	Bounce *NotificationType `pulumi:"bounce"`
	// Arguments to manage incoming Complaint notifications.
	Complaint *NotificationType `pulumi:"complaint"`
	// In the case of a Domain Identity, enables automatic verification by creating DKIM DNS Records in the domain registration on Route 53.
	// If the domain is not registered in the Route 53 on the same AWS account that is applying the infrastructure changes, the process will fail unless this flag is set to False.
	ConfigureDNS *bool `pulumi:"configureDNS"`
	// Arguments to manage incoming Delivery notifications.
	Delivery *NotificationType `pulumi:"delivery"`
	// Address of the Domain or Email used to send the emails through Email Sender.
	// If an Email address is provided, Email Sender will set a Simple Email Service Email Identity. Verification will need to be manual.
	// Else, if a Domain address is configured, Email Sender will create a Simple Email Service Domain Identity.
	// By default, it will attempt to verify the Domain by looking the Route 53 Domain Registry in the AWS account that is applying the infrastructure changes.
	// If the Domain is registered elsewhere, verification needs to be manual.
	Identity string `pulumi:"identity"`
}

// The set of arguments for constructing a EmailSender resource.
type EmailSenderArgs struct {
	// Arguments to manage incoming Bounce notifications.
	Bounce NotificationTypePtrInput
	// Arguments to manage incoming Complaint notifications.
	Complaint NotificationTypePtrInput
	// In the case of a Domain Identity, enables automatic verification by creating DKIM DNS Records in the domain registration on Route 53.
	// If the domain is not registered in the Route 53 on the same AWS account that is applying the infrastructure changes, the process will fail unless this flag is set to False.
	ConfigureDNS pulumi.BoolPtrInput
	// Arguments to manage incoming Delivery notifications.
	Delivery NotificationTypePtrInput
	// Address of the Domain or Email used to send the emails through Email Sender.
	// If an Email address is provided, Email Sender will set a Simple Email Service Email Identity. Verification will need to be manual.
	// Else, if a Domain address is configured, Email Sender will create a Simple Email Service Domain Identity.
	// By default, it will attempt to verify the Domain by looking the Route 53 Domain Registry in the AWS account that is applying the infrastructure changes.
	// If the Domain is registered elsewhere, verification needs to be manual.
	Identity pulumi.StringInput
}

func (EmailSenderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailSenderArgs)(nil)).Elem()
}

type EmailSenderInput interface {
	pulumi.Input

	ToEmailSenderOutput() EmailSenderOutput
	ToEmailSenderOutputWithContext(ctx context.Context) EmailSenderOutput
}

func (*EmailSender) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailSender)(nil)).Elem()
}

func (i *EmailSender) ToEmailSenderOutput() EmailSenderOutput {
	return i.ToEmailSenderOutputWithContext(context.Background())
}

func (i *EmailSender) ToEmailSenderOutputWithContext(ctx context.Context) EmailSenderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSenderOutput)
}

// EmailSenderArrayInput is an input type that accepts EmailSenderArray and EmailSenderArrayOutput values.
// You can construct a concrete instance of `EmailSenderArrayInput` via:
//
//	EmailSenderArray{ EmailSenderArgs{...} }
type EmailSenderArrayInput interface {
	pulumi.Input

	ToEmailSenderArrayOutput() EmailSenderArrayOutput
	ToEmailSenderArrayOutputWithContext(context.Context) EmailSenderArrayOutput
}

type EmailSenderArray []EmailSenderInput

func (EmailSenderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailSender)(nil)).Elem()
}

func (i EmailSenderArray) ToEmailSenderArrayOutput() EmailSenderArrayOutput {
	return i.ToEmailSenderArrayOutputWithContext(context.Background())
}

func (i EmailSenderArray) ToEmailSenderArrayOutputWithContext(ctx context.Context) EmailSenderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSenderArrayOutput)
}

// EmailSenderMapInput is an input type that accepts EmailSenderMap and EmailSenderMapOutput values.
// You can construct a concrete instance of `EmailSenderMapInput` via:
//
//	EmailSenderMap{ "key": EmailSenderArgs{...} }
type EmailSenderMapInput interface {
	pulumi.Input

	ToEmailSenderMapOutput() EmailSenderMapOutput
	ToEmailSenderMapOutputWithContext(context.Context) EmailSenderMapOutput
}

type EmailSenderMap map[string]EmailSenderInput

func (EmailSenderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailSender)(nil)).Elem()
}

func (i EmailSenderMap) ToEmailSenderMapOutput() EmailSenderMapOutput {
	return i.ToEmailSenderMapOutputWithContext(context.Background())
}

func (i EmailSenderMap) ToEmailSenderMapOutputWithContext(ctx context.Context) EmailSenderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailSenderMapOutput)
}

type EmailSenderOutput struct{ *pulumi.OutputState }

func (EmailSenderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailSender)(nil)).Elem()
}

func (o EmailSenderOutput) ToEmailSenderOutput() EmailSenderOutput {
	return o
}

func (o EmailSenderOutput) ToEmailSenderOutputWithContext(ctx context.Context) EmailSenderOutput {
	return o
}

// Address of the Identity, regardless if it is a Domain or an Email.
func (o EmailSenderOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *EmailSender) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Additional SQS Queues subscribed to the SNS Topic that receives bounced emails. These Queues were created outside the Email Sender component.
func (o EmailSenderOutput) BounceAdditionalQueues() AdditionalQueueArrayOutput {
	return o.ApplyT(func(v *EmailSender) AdditionalQueueArrayOutput { return v.BounceAdditionalQueues }).(AdditionalQueueArrayOutput)
}

// Queue Policies attached to the externally provided Bounce SQS Queues.
func (o EmailSenderOutput) BounceAdditionalQueuesPolicies() sqs.QueuePolicyArrayOutput {
	return o.ApplyT(func(v *EmailSender) sqs.QueuePolicyArrayOutput { return v.BounceAdditionalQueuesPolicies }).(sqs.QueuePolicyArrayOutput)
}

// Identity Notification Topic for bounced emails.
func (o EmailSenderOutput) BounceIdentityNotificationTopic() ses.IdentityNotificationTopicOutput {
	return o.ApplyT(func(v *EmailSender) ses.IdentityNotificationTopicOutput { return v.BounceIdentityNotificationTopic }).(ses.IdentityNotificationTopicOutput)
}

// SQS Queues subscribed to the SNS Topic that receives bounced emails. These Queues were created automatically by the Email Sender component.
func (o EmailSenderOutput) BounceQueues() serverless.QueueArrayOutput {
	return o.ApplyT(func(v *EmailSender) serverless.QueueArrayOutput { return v.BounceQueues }).(serverless.QueueArrayOutput)
}

// SNS Topic for bounced emails.
func (o EmailSenderOutput) BounceTopic() sns.TopicOutput {
	return o.ApplyT(func(v *EmailSender) sns.TopicOutput { return v.BounceTopic }).(sns.TopicOutput)
}

// SNS subscriptions of the SQS Queues to the Bounce SNS Topic.
func (o EmailSenderOutput) BounceTopicSubscriptions() sns.TopicSubscriptionArrayOutput {
	return o.ApplyT(func(v *EmailSender) sns.TopicSubscriptionArrayOutput { return v.BounceTopicSubscriptions }).(sns.TopicSubscriptionArrayOutput)
}

// Additional SQS Queues subscribed to the SNS Topic that receives complained emails. These Queues were created outside the Email Sender component.
func (o EmailSenderOutput) ComplaintAdditionalQueues() AdditionalQueueArrayOutput {
	return o.ApplyT(func(v *EmailSender) AdditionalQueueArrayOutput { return v.ComplaintAdditionalQueues }).(AdditionalQueueArrayOutput)
}

// Queue Policies attached to the externally provided Complaint SQS Queues.
func (o EmailSenderOutput) ComplaintAdditionalQueuesPolicies() sqs.QueuePolicyArrayOutput {
	return o.ApplyT(func(v *EmailSender) sqs.QueuePolicyArrayOutput { return v.ComplaintAdditionalQueuesPolicies }).(sqs.QueuePolicyArrayOutput)
}

// Identity Notification Topic for complained emails.
func (o EmailSenderOutput) ComplaintIdentityNotificationTopic() ses.IdentityNotificationTopicOutput {
	return o.ApplyT(func(v *EmailSender) ses.IdentityNotificationTopicOutput { return v.ComplaintIdentityNotificationTopic }).(ses.IdentityNotificationTopicOutput)
}

// SQS Queues subscribed to the SNS Topic that receives complained emails. These Queues were created automatically by the Email Sender component.
func (o EmailSenderOutput) ComplaintQueues() serverless.QueueArrayOutput {
	return o.ApplyT(func(v *EmailSender) serverless.QueueArrayOutput { return v.ComplaintQueues }).(serverless.QueueArrayOutput)
}

// SNS Topic for complained emails.
func (o EmailSenderOutput) ComplaintTopic() sns.TopicOutput {
	return o.ApplyT(func(v *EmailSender) sns.TopicOutput { return v.ComplaintTopic }).(sns.TopicOutput)
}

// SNS subscriptions of the SQS Queues to the Complaint SNS Topic.
func (o EmailSenderOutput) ComplaintTopicSubscriptions() sns.TopicSubscriptionArrayOutput {
	return o.ApplyT(func(v *EmailSender) sns.TopicSubscriptionArrayOutput { return v.ComplaintTopicSubscriptions }).(sns.TopicSubscriptionArrayOutput)
}

// Additional SQS Queues subscribed to the SNS Topic that receives delivered emails. These Queues were created outside the Email Sender component.
func (o EmailSenderOutput) DeliveryAdditionalQueues() AdditionalQueueArrayOutput {
	return o.ApplyT(func(v *EmailSender) AdditionalQueueArrayOutput { return v.DeliveryAdditionalQueues }).(AdditionalQueueArrayOutput)
}

// Queue Policies attached to the externally provided Delivery SQS Queues.
func (o EmailSenderOutput) DeliveryAdditionalQueuesPolicies() sqs.QueuePolicyArrayOutput {
	return o.ApplyT(func(v *EmailSender) sqs.QueuePolicyArrayOutput { return v.DeliveryAdditionalQueuesPolicies }).(sqs.QueuePolicyArrayOutput)
}

// Identity Notification Topic for delivered emails.
func (o EmailSenderOutput) DeliveryIdentityNotificationTopic() ses.IdentityNotificationTopicOutput {
	return o.ApplyT(func(v *EmailSender) ses.IdentityNotificationTopicOutput { return v.DeliveryIdentityNotificationTopic }).(ses.IdentityNotificationTopicOutput)
}

// SQS Queues subscribed to the SNS Topic that receives delivered emails. These Queues were created automatically by the Email Sender component.
func (o EmailSenderOutput) DeliveryQueues() serverless.QueueArrayOutput {
	return o.ApplyT(func(v *EmailSender) serverless.QueueArrayOutput { return v.DeliveryQueues }).(serverless.QueueArrayOutput)
}

// SNS Topic for delivered emails.
func (o EmailSenderOutput) DeliveryTopic() sns.TopicOutput {
	return o.ApplyT(func(v *EmailSender) sns.TopicOutput { return v.DeliveryTopic }).(sns.TopicOutput)
}

// SNS subscriptions of the SQS Queues to the Delivery SNS Topic.
func (o EmailSenderOutput) DeliveryTopicSubscriptions() sns.TopicSubscriptionArrayOutput {
	return o.ApplyT(func(v *EmailSender) sns.TopicSubscriptionArrayOutput { return v.DeliveryTopicSubscriptions }).(sns.TopicSubscriptionArrayOutput)
}

// DNS DKIM Records. Only applies for Domain Identities.
func (o EmailSenderOutput) DnsDkimRecords() DnsDkimRecordArrayOutput {
	return o.ApplyT(func(v *EmailSender) DnsDkimRecordArrayOutput { return v.DnsDkimRecords }).(DnsDkimRecordArrayOutput)
}

// DNS records stored in the Domain registration in Route 53. Only applies for Domain Identities that are registered using Route 53.
func (o EmailSenderOutput) DnsRecords() route53.RecordArrayOutput {
	return o.ApplyT(func(v *EmailSender) route53.RecordArrayOutput { return v.DnsRecords }).(route53.RecordArrayOutput)
}

// DNS zone identifier in Route 53 for the Domain. Only applies for Domain Identities that are registered using Route 53.
func (o EmailSenderOutput) DnsZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EmailSender) pulumi.StringPtrOutput { return v.DnsZoneId }).(pulumi.StringPtrOutput)
}

// Domain DKIM. Only applies for Domain Identities.
func (o EmailSenderOutput) DomainDKIM() ses.DomainDkimOutput {
	return o.ApplyT(func(v *EmailSender) ses.DomainDkimOutput { return v.DomainDKIM }).(ses.DomainDkimOutput)
}

// Domain Identity component. Left blank if an Email Identity was used instead.
func (o EmailSenderOutput) DomainIdentity() ses.DomainIdentityOutput {
	return o.ApplyT(func(v *EmailSender) ses.DomainIdentityOutput { return v.DomainIdentity }).(ses.DomainIdentityOutput)
}

// Email Identity component. Left blank if a Domain Identity was used instead.
func (o EmailSenderOutput) EmailIdentity() ses.EmailIdentityOutput {
	return o.ApplyT(func(v *EmailSender) ses.EmailIdentityOutput { return v.EmailIdentity }).(ses.EmailIdentityOutput)
}

// Policy that when attached to an user, allows them to read the notification messages in the Queues.
func (o EmailSenderOutput) NotificationsPolicy() iam.PolicyOutput {
	return o.ApplyT(func(v *EmailSender) iam.PolicyOutput { return v.NotificationsPolicy }).(iam.PolicyOutput)
}

// Resource Groups that contain the underlying components such as Topics or Queues that belong to the Email Sender.
func (o EmailSenderOutput) ResourceGroups() resourcegroups.GroupArrayOutput {
	return o.ApplyT(func(v *EmailSender) resourcegroups.GroupArrayOutput { return v.ResourceGroups }).(resourcegroups.GroupArrayOutput)
}

// Policy that when attached to an user, allows them to send messages using the Email Sender Identity.
func (o EmailSenderOutput) SenderPolicy() iam.PolicyOutput {
	return o.ApplyT(func(v *EmailSender) iam.PolicyOutput { return v.SenderPolicy }).(iam.PolicyOutput)
}

type EmailSenderArrayOutput struct{ *pulumi.OutputState }

func (EmailSenderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailSender)(nil)).Elem()
}

func (o EmailSenderArrayOutput) ToEmailSenderArrayOutput() EmailSenderArrayOutput {
	return o
}

func (o EmailSenderArrayOutput) ToEmailSenderArrayOutputWithContext(ctx context.Context) EmailSenderArrayOutput {
	return o
}

func (o EmailSenderArrayOutput) Index(i pulumi.IntInput) EmailSenderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EmailSender {
		return vs[0].([]*EmailSender)[vs[1].(int)]
	}).(EmailSenderOutput)
}

type EmailSenderMapOutput struct{ *pulumi.OutputState }

func (EmailSenderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailSender)(nil)).Elem()
}

func (o EmailSenderMapOutput) ToEmailSenderMapOutput() EmailSenderMapOutput {
	return o
}

func (o EmailSenderMapOutput) ToEmailSenderMapOutputWithContext(ctx context.Context) EmailSenderMapOutput {
	return o
}

func (o EmailSenderMapOutput) MapIndex(k pulumi.StringInput) EmailSenderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EmailSender {
		return vs[0].(map[string]*EmailSender)[vs[1].(string)]
	}).(EmailSenderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSenderInput)(nil)).Elem(), &EmailSender{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSenderArrayInput)(nil)).Elem(), EmailSenderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailSenderMapInput)(nil)).Elem(), EmailSenderMap{})
	pulumi.RegisterOutputType(EmailSenderOutput{})
	pulumi.RegisterOutputType(EmailSenderArrayOutput{})
	pulumi.RegisterOutputType(EmailSenderMapOutput{})
}
