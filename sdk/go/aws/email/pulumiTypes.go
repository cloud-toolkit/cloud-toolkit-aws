// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package email

import (
	"context"
	"reflect"

	"github.com/cloud-toolkit/cloud-toolkit-aws/sdk/go/aws/serverless"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AdditionalQueue struct {
	// Amazon Resource Name for the Queue component.
	Arn string `pulumi:"arn"`
	// Endpoint of the Queue component in AWS.
	Url string `pulumi:"url"`
}

// AdditionalQueueInput is an input type that accepts AdditionalQueueArgs and AdditionalQueueOutput values.
// You can construct a concrete instance of `AdditionalQueueInput` via:
//
//	AdditionalQueueArgs{...}
type AdditionalQueueInput interface {
	pulumi.Input

	ToAdditionalQueueOutput() AdditionalQueueOutput
	ToAdditionalQueueOutputWithContext(context.Context) AdditionalQueueOutput
}

type AdditionalQueueArgs struct {
	// Amazon Resource Name for the Queue component.
	Arn pulumi.StringInput `pulumi:"arn"`
	// Endpoint of the Queue component in AWS.
	Url pulumi.StringInput `pulumi:"url"`
}

func (AdditionalQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalQueue)(nil)).Elem()
}

func (i AdditionalQueueArgs) ToAdditionalQueueOutput() AdditionalQueueOutput {
	return i.ToAdditionalQueueOutputWithContext(context.Background())
}

func (i AdditionalQueueArgs) ToAdditionalQueueOutputWithContext(ctx context.Context) AdditionalQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalQueueOutput)
}

// AdditionalQueueArrayInput is an input type that accepts AdditionalQueueArray and AdditionalQueueArrayOutput values.
// You can construct a concrete instance of `AdditionalQueueArrayInput` via:
//
//	AdditionalQueueArray{ AdditionalQueueArgs{...} }
type AdditionalQueueArrayInput interface {
	pulumi.Input

	ToAdditionalQueueArrayOutput() AdditionalQueueArrayOutput
	ToAdditionalQueueArrayOutputWithContext(context.Context) AdditionalQueueArrayOutput
}

type AdditionalQueueArray []AdditionalQueueInput

func (AdditionalQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalQueue)(nil)).Elem()
}

func (i AdditionalQueueArray) ToAdditionalQueueArrayOutput() AdditionalQueueArrayOutput {
	return i.ToAdditionalQueueArrayOutputWithContext(context.Background())
}

func (i AdditionalQueueArray) ToAdditionalQueueArrayOutputWithContext(ctx context.Context) AdditionalQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdditionalQueueArrayOutput)
}

type AdditionalQueueOutput struct{ *pulumi.OutputState }

func (AdditionalQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdditionalQueue)(nil)).Elem()
}

func (o AdditionalQueueOutput) ToAdditionalQueueOutput() AdditionalQueueOutput {
	return o
}

func (o AdditionalQueueOutput) ToAdditionalQueueOutputWithContext(ctx context.Context) AdditionalQueueOutput {
	return o
}

// Amazon Resource Name for the Queue component.
func (o AdditionalQueueOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalQueue) string { return v.Arn }).(pulumi.StringOutput)
}

// Endpoint of the Queue component in AWS.
func (o AdditionalQueueOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v AdditionalQueue) string { return v.Url }).(pulumi.StringOutput)
}

type AdditionalQueueArrayOutput struct{ *pulumi.OutputState }

func (AdditionalQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdditionalQueue)(nil)).Elem()
}

func (o AdditionalQueueArrayOutput) ToAdditionalQueueArrayOutput() AdditionalQueueArrayOutput {
	return o
}

func (o AdditionalQueueArrayOutput) ToAdditionalQueueArrayOutputWithContext(ctx context.Context) AdditionalQueueArrayOutput {
	return o
}

func (o AdditionalQueueArrayOutput) Index(i pulumi.IntInput) AdditionalQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdditionalQueue {
		return vs[0].([]AdditionalQueue)[vs[1].(int)]
	}).(AdditionalQueueOutput)
}

type DnsDkimRecord struct {
	// Name of the Record.
	Name string `pulumi:"name"`
	// Token of the Record.
	Token string `pulumi:"token"`
}

type DnsDkimRecordOutput struct{ *pulumi.OutputState }

func (DnsDkimRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsDkimRecord)(nil)).Elem()
}

func (o DnsDkimRecordOutput) ToDnsDkimRecordOutput() DnsDkimRecordOutput {
	return o
}

func (o DnsDkimRecordOutput) ToDnsDkimRecordOutputWithContext(ctx context.Context) DnsDkimRecordOutput {
	return o
}

// Name of the Record.
func (o DnsDkimRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DnsDkimRecord) string { return v.Name }).(pulumi.StringOutput)
}

// Token of the Record.
func (o DnsDkimRecordOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v DnsDkimRecord) string { return v.Token }).(pulumi.StringOutput)
}

type DnsDkimRecordArrayOutput struct{ *pulumi.OutputState }

func (DnsDkimRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsDkimRecord)(nil)).Elem()
}

func (o DnsDkimRecordArrayOutput) ToDnsDkimRecordArrayOutput() DnsDkimRecordArrayOutput {
	return o
}

func (o DnsDkimRecordArrayOutput) ToDnsDkimRecordArrayOutputWithContext(ctx context.Context) DnsDkimRecordArrayOutput {
	return o
}

func (o DnsDkimRecordArrayOutput) Index(i pulumi.IntInput) DnsDkimRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsDkimRecord {
		return vs[0].([]DnsDkimRecord)[vs[1].(int)]
	}).(DnsDkimRecordOutput)
}

type EmailSenderType struct {
	// Arguments to manage incoming Bounce notifications.
	Bounce *NotificationType `pulumi:"bounce"`
	// Arguments to manage incoming Complaint notifications.
	Complaint *NotificationType `pulumi:"complaint"`
	// In the case of a Domain Identity, enables automatic verification by creating DKIM DNS Records in the domain registration on Route 53.
	// If the domain is not registered in the Route 53 on the same AWS account that is applying the infrastructure changes, the process will fail unless this flag is set to False.
	ConfigureDNS *bool `pulumi:"configureDNS"`
	// Arguments to manage incoming Delivery notifications.
	Delivery *NotificationType `pulumi:"delivery"`
	// Address of the Domain or Email used to send the emails through Email Sender.
	// If an Email address is provided, Email Sender will set a Simple Email Service Email Identity. Verification will need to be manual.
	// Else, if a Domain address is configured, Email Sender will create a Simple Email Service Domain Identity.
	// By default, it will attempt to verify the Domain by looking the Route 53 Domain Registry in the AWS account that is applying the infrastructure changes.
	// If the Domain is registered elsewhere, verification needs to be manual.
	Identity string `pulumi:"identity"`
}

type NotificationType struct {
	// Enables the feature.
	Enabled bool `pulumi:"enabled"`
	// Include original headers on the stored messages in the Queue(s).
	IncludeOriginalHeaders *bool `pulumi:"includeOriginalHeaders"`
	// Arguments to configure the Queues subscribed to the Notification Type Topic.
	// If left blank, a default standard, non-fifo, Queue and a Dead Letter Queue that is attached to the former will be created.
	Queues *NotificationTypeQueues `pulumi:"queues"`
}

// NotificationTypeInput is an input type that accepts NotificationTypeArgs and NotificationTypeOutput values.
// You can construct a concrete instance of `NotificationTypeInput` via:
//
//	NotificationTypeArgs{...}
type NotificationTypeInput interface {
	pulumi.Input

	ToNotificationTypeOutput() NotificationTypeOutput
	ToNotificationTypeOutputWithContext(context.Context) NotificationTypeOutput
}

type NotificationTypeArgs struct {
	// Enables the feature.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Include original headers on the stored messages in the Queue(s).
	IncludeOriginalHeaders pulumi.BoolPtrInput `pulumi:"includeOriginalHeaders"`
	// Arguments to configure the Queues subscribed to the Notification Type Topic.
	// If left blank, a default standard, non-fifo, Queue and a Dead Letter Queue that is attached to the former will be created.
	Queues NotificationTypeQueuesPtrInput `pulumi:"queues"`
}

func (NotificationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationType)(nil)).Elem()
}

func (i NotificationTypeArgs) ToNotificationTypeOutput() NotificationTypeOutput {
	return i.ToNotificationTypeOutputWithContext(context.Background())
}

func (i NotificationTypeArgs) ToNotificationTypeOutputWithContext(ctx context.Context) NotificationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTypeOutput)
}

func (i NotificationTypeArgs) ToNotificationTypePtrOutput() NotificationTypePtrOutput {
	return i.ToNotificationTypePtrOutputWithContext(context.Background())
}

func (i NotificationTypeArgs) ToNotificationTypePtrOutputWithContext(ctx context.Context) NotificationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTypeOutput).ToNotificationTypePtrOutputWithContext(ctx)
}

// NotificationTypePtrInput is an input type that accepts NotificationTypeArgs, NotificationTypePtr and NotificationTypePtrOutput values.
// You can construct a concrete instance of `NotificationTypePtrInput` via:
//
//	        NotificationTypeArgs{...}
//
//	or:
//
//	        nil
type NotificationTypePtrInput interface {
	pulumi.Input

	ToNotificationTypePtrOutput() NotificationTypePtrOutput
	ToNotificationTypePtrOutputWithContext(context.Context) NotificationTypePtrOutput
}

type notificationTypePtrType NotificationTypeArgs

func NotificationTypePtr(v *NotificationTypeArgs) NotificationTypePtrInput {
	return (*notificationTypePtrType)(v)
}

func (*notificationTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationType)(nil)).Elem()
}

func (i *notificationTypePtrType) ToNotificationTypePtrOutput() NotificationTypePtrOutput {
	return i.ToNotificationTypePtrOutputWithContext(context.Background())
}

func (i *notificationTypePtrType) ToNotificationTypePtrOutputWithContext(ctx context.Context) NotificationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTypePtrOutput)
}

type NotificationTypeOutput struct{ *pulumi.OutputState }

func (NotificationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationType)(nil)).Elem()
}

func (o NotificationTypeOutput) ToNotificationTypeOutput() NotificationTypeOutput {
	return o
}

func (o NotificationTypeOutput) ToNotificationTypeOutputWithContext(ctx context.Context) NotificationTypeOutput {
	return o
}

func (o NotificationTypeOutput) ToNotificationTypePtrOutput() NotificationTypePtrOutput {
	return o.ToNotificationTypePtrOutputWithContext(context.Background())
}

func (o NotificationTypeOutput) ToNotificationTypePtrOutputWithContext(ctx context.Context) NotificationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationType) *NotificationType {
		return &v
	}).(NotificationTypePtrOutput)
}

// Enables the feature.
func (o NotificationTypeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v NotificationType) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Include original headers on the stored messages in the Queue(s).
func (o NotificationTypeOutput) IncludeOriginalHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationType) *bool { return v.IncludeOriginalHeaders }).(pulumi.BoolPtrOutput)
}

// Arguments to configure the Queues subscribed to the Notification Type Topic.
// If left blank, a default standard, non-fifo, Queue and a Dead Letter Queue that is attached to the former will be created.
func (o NotificationTypeOutput) Queues() NotificationTypeQueuesPtrOutput {
	return o.ApplyT(func(v NotificationType) *NotificationTypeQueues { return v.Queues }).(NotificationTypeQueuesPtrOutput)
}

type NotificationTypePtrOutput struct{ *pulumi.OutputState }

func (NotificationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationType)(nil)).Elem()
}

func (o NotificationTypePtrOutput) ToNotificationTypePtrOutput() NotificationTypePtrOutput {
	return o
}

func (o NotificationTypePtrOutput) ToNotificationTypePtrOutputWithContext(ctx context.Context) NotificationTypePtrOutput {
	return o
}

func (o NotificationTypePtrOutput) Elem() NotificationTypeOutput {
	return o.ApplyT(func(v *NotificationType) NotificationType {
		if v != nil {
			return *v
		}
		var ret NotificationType
		return ret
	}).(NotificationTypeOutput)
}

// Enables the feature.
func (o NotificationTypePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationType) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Include original headers on the stored messages in the Queue(s).
func (o NotificationTypePtrOutput) IncludeOriginalHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationType) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeOriginalHeaders
	}).(pulumi.BoolPtrOutput)
}

// Arguments to configure the Queues subscribed to the Notification Type Topic.
// If left blank, a default standard, non-fifo, Queue and a Dead Letter Queue that is attached to the former will be created.
func (o NotificationTypePtrOutput) Queues() NotificationTypeQueuesPtrOutput {
	return o.ApplyT(func(v *NotificationType) *NotificationTypeQueues {
		if v == nil {
			return nil
		}
		return v.Queues
	}).(NotificationTypeQueuesPtrOutput)
}

type NotificationTypeQueues struct {
	// Arguments to include Queues built and implemented outside of the Email Sender Component. Useful when subscribing a single Queue to two or more Topics or when migrating existing ones.
	AdditionalQueues []AdditionalQueue `pulumi:"additionalQueues"`
	// Configuration for the Default Queues. If left blank, Queues created for this Notification Type will be standard, non-fifo, with a Dead Letter Queue attached to them.
	DefaultQueuesConfig *serverless.QueueType `pulumi:"defaultQueuesConfig"`
	// Number of default Queues that will be created and attached to a Topic.
	NumberOfDefaultQueues float64 `pulumi:"numberOfDefaultQueues"`
}

// NotificationTypeQueuesInput is an input type that accepts NotificationTypeQueuesArgs and NotificationTypeQueuesOutput values.
// You can construct a concrete instance of `NotificationTypeQueuesInput` via:
//
//	NotificationTypeQueuesArgs{...}
type NotificationTypeQueuesInput interface {
	pulumi.Input

	ToNotificationTypeQueuesOutput() NotificationTypeQueuesOutput
	ToNotificationTypeQueuesOutputWithContext(context.Context) NotificationTypeQueuesOutput
}

type NotificationTypeQueuesArgs struct {
	// Arguments to include Queues built and implemented outside of the Email Sender Component. Useful when subscribing a single Queue to two or more Topics or when migrating existing ones.
	AdditionalQueues AdditionalQueueArrayInput `pulumi:"additionalQueues"`
	// Configuration for the Default Queues. If left blank, Queues created for this Notification Type will be standard, non-fifo, with a Dead Letter Queue attached to them.
	DefaultQueuesConfig serverless.QueueTypePtrInput `pulumi:"defaultQueuesConfig"`
	// Number of default Queues that will be created and attached to a Topic.
	NumberOfDefaultQueues pulumi.Float64Input `pulumi:"numberOfDefaultQueues"`
}

func (NotificationTypeQueuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationTypeQueues)(nil)).Elem()
}

func (i NotificationTypeQueuesArgs) ToNotificationTypeQueuesOutput() NotificationTypeQueuesOutput {
	return i.ToNotificationTypeQueuesOutputWithContext(context.Background())
}

func (i NotificationTypeQueuesArgs) ToNotificationTypeQueuesOutputWithContext(ctx context.Context) NotificationTypeQueuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTypeQueuesOutput)
}

func (i NotificationTypeQueuesArgs) ToNotificationTypeQueuesPtrOutput() NotificationTypeQueuesPtrOutput {
	return i.ToNotificationTypeQueuesPtrOutputWithContext(context.Background())
}

func (i NotificationTypeQueuesArgs) ToNotificationTypeQueuesPtrOutputWithContext(ctx context.Context) NotificationTypeQueuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTypeQueuesOutput).ToNotificationTypeQueuesPtrOutputWithContext(ctx)
}

// NotificationTypeQueuesPtrInput is an input type that accepts NotificationTypeQueuesArgs, NotificationTypeQueuesPtr and NotificationTypeQueuesPtrOutput values.
// You can construct a concrete instance of `NotificationTypeQueuesPtrInput` via:
//
//	        NotificationTypeQueuesArgs{...}
//
//	or:
//
//	        nil
type NotificationTypeQueuesPtrInput interface {
	pulumi.Input

	ToNotificationTypeQueuesPtrOutput() NotificationTypeQueuesPtrOutput
	ToNotificationTypeQueuesPtrOutputWithContext(context.Context) NotificationTypeQueuesPtrOutput
}

type notificationTypeQueuesPtrType NotificationTypeQueuesArgs

func NotificationTypeQueuesPtr(v *NotificationTypeQueuesArgs) NotificationTypeQueuesPtrInput {
	return (*notificationTypeQueuesPtrType)(v)
}

func (*notificationTypeQueuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationTypeQueues)(nil)).Elem()
}

func (i *notificationTypeQueuesPtrType) ToNotificationTypeQueuesPtrOutput() NotificationTypeQueuesPtrOutput {
	return i.ToNotificationTypeQueuesPtrOutputWithContext(context.Background())
}

func (i *notificationTypeQueuesPtrType) ToNotificationTypeQueuesPtrOutputWithContext(ctx context.Context) NotificationTypeQueuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationTypeQueuesPtrOutput)
}

type NotificationTypeQueuesOutput struct{ *pulumi.OutputState }

func (NotificationTypeQueuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationTypeQueues)(nil)).Elem()
}

func (o NotificationTypeQueuesOutput) ToNotificationTypeQueuesOutput() NotificationTypeQueuesOutput {
	return o
}

func (o NotificationTypeQueuesOutput) ToNotificationTypeQueuesOutputWithContext(ctx context.Context) NotificationTypeQueuesOutput {
	return o
}

func (o NotificationTypeQueuesOutput) ToNotificationTypeQueuesPtrOutput() NotificationTypeQueuesPtrOutput {
	return o.ToNotificationTypeQueuesPtrOutputWithContext(context.Background())
}

func (o NotificationTypeQueuesOutput) ToNotificationTypeQueuesPtrOutputWithContext(ctx context.Context) NotificationTypeQueuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationTypeQueues) *NotificationTypeQueues {
		return &v
	}).(NotificationTypeQueuesPtrOutput)
}

// Arguments to include Queues built and implemented outside of the Email Sender Component. Useful when subscribing a single Queue to two or more Topics or when migrating existing ones.
func (o NotificationTypeQueuesOutput) AdditionalQueues() AdditionalQueueArrayOutput {
	return o.ApplyT(func(v NotificationTypeQueues) []AdditionalQueue { return v.AdditionalQueues }).(AdditionalQueueArrayOutput)
}

// Configuration for the Default Queues. If left blank, Queues created for this Notification Type will be standard, non-fifo, with a Dead Letter Queue attached to them.
func (o NotificationTypeQueuesOutput) DefaultQueuesConfig() serverless.QueueTypePtrOutput {
	return o.ApplyT(func(v NotificationTypeQueues) *serverless.QueueType { return v.DefaultQueuesConfig }).(serverless.QueueTypePtrOutput)
}

// Number of default Queues that will be created and attached to a Topic.
func (o NotificationTypeQueuesOutput) NumberOfDefaultQueues() pulumi.Float64Output {
	return o.ApplyT(func(v NotificationTypeQueues) float64 { return v.NumberOfDefaultQueues }).(pulumi.Float64Output)
}

type NotificationTypeQueuesPtrOutput struct{ *pulumi.OutputState }

func (NotificationTypeQueuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationTypeQueues)(nil)).Elem()
}

func (o NotificationTypeQueuesPtrOutput) ToNotificationTypeQueuesPtrOutput() NotificationTypeQueuesPtrOutput {
	return o
}

func (o NotificationTypeQueuesPtrOutput) ToNotificationTypeQueuesPtrOutputWithContext(ctx context.Context) NotificationTypeQueuesPtrOutput {
	return o
}

func (o NotificationTypeQueuesPtrOutput) Elem() NotificationTypeQueuesOutput {
	return o.ApplyT(func(v *NotificationTypeQueues) NotificationTypeQueues {
		if v != nil {
			return *v
		}
		var ret NotificationTypeQueues
		return ret
	}).(NotificationTypeQueuesOutput)
}

// Arguments to include Queues built and implemented outside of the Email Sender Component. Useful when subscribing a single Queue to two or more Topics or when migrating existing ones.
func (o NotificationTypeQueuesPtrOutput) AdditionalQueues() AdditionalQueueArrayOutput {
	return o.ApplyT(func(v *NotificationTypeQueues) []AdditionalQueue {
		if v == nil {
			return nil
		}
		return v.AdditionalQueues
	}).(AdditionalQueueArrayOutput)
}

// Configuration for the Default Queues. If left blank, Queues created for this Notification Type will be standard, non-fifo, with a Dead Letter Queue attached to them.
func (o NotificationTypeQueuesPtrOutput) DefaultQueuesConfig() serverless.QueueTypePtrOutput {
	return o.ApplyT(func(v *NotificationTypeQueues) *serverless.QueueType {
		if v == nil {
			return nil
		}
		return v.DefaultQueuesConfig
	}).(serverless.QueueTypePtrOutput)
}

// Number of default Queues that will be created and attached to a Topic.
func (o NotificationTypeQueuesPtrOutput) NumberOfDefaultQueues() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NotificationTypeQueues) *float64 {
		if v == nil {
			return nil
		}
		return &v.NumberOfDefaultQueues
	}).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalQueueInput)(nil)).Elem(), AdditionalQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdditionalQueueArrayInput)(nil)).Elem(), AdditionalQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationTypeInput)(nil)).Elem(), NotificationTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationTypePtrInput)(nil)).Elem(), NotificationTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationTypeQueuesInput)(nil)).Elem(), NotificationTypeQueuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationTypeQueuesPtrInput)(nil)).Elem(), NotificationTypeQueuesArgs{})
	pulumi.RegisterOutputType(AdditionalQueueOutput{})
	pulumi.RegisterOutputType(AdditionalQueueArrayOutput{})
	pulumi.RegisterOutputType(DnsDkimRecordOutput{})
	pulumi.RegisterOutputType(DnsDkimRecordArrayOutput{})
	pulumi.RegisterOutputType(NotificationTypeOutput{})
	pulumi.RegisterOutputType(NotificationTypePtrOutput{})
	pulumi.RegisterOutputType(NotificationTypeQueuesOutput{})
	pulumi.RegisterOutputType(NotificationTypeQueuesPtrOutput{})
}
