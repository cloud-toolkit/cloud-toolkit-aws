// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Cloud Toolkit component for Bcukets. Creates a Simple Bucket for object storage
type Bucket struct {
	pulumi.ResourceState

	// Instance of our Bucket
	Bucket s3.BucketV2Output `pulumi:"bucket"`
	// Configuration for controlling bucket encryption
	BucketEncryption s3.BucketServerSideEncryptionConfigurationV2Output `pulumi:"bucketEncryption"`
	// Enforce that bucket owner is all bucket objects
	BucketOwnership s3.BucketOwnershipControlsOutput `pulumi:"bucketOwnership"`
	// Controls that IAM policies complies with bucket visibility (public or private)
	BucketPublicAccess s3.BucketPublicAccessBlockOutput `pulumi:"bucketPublicAccess"`
	// Policy to make public all objects if bucket visibility is public
	BucketPublicAccessPolicy s3.BucketPolicyOutput `pulumi:"bucketPublicAccessPolicy"`
	// Configuration for controlling bucket versioning
	BucketVersioning s3.BucketVersioningV2Output `pulumi:"bucketVersioning"`
	// Policy for read-only users
	ReadOnlyBucketPolicy iam.PolicyOutput `pulumi:"readOnlyBucketPolicy"`
	// Configuration to perform bucket replication
	ReplicationConfig s3.BucketReplicationConfigOutput `pulumi:"replicationConfig"`
	// Policy attachments to perform bucket replication
	ReplicationPolicyAttachment iam.RolePolicyAttachmentOutput `pulumi:"replicationPolicyAttachment"`
	// Required role for managing bucket
	Role iam.RoleOutput `pulumi:"role"`
	// Configuration to setup a website
	Website s3.BucketWebsiteConfigurationV2Output `pulumi:"website"`
	// Policy for write users
	WriteBucketPolicy iam.PolicyOutput `pulumi:"writeBucketPolicy"`
}

// NewBucket registers a new resource with the given unique name, arguments, and options.
func NewBucket(ctx *pulumi.Context,
	name string, args *BucketArgs, opts ...pulumi.ResourceOption) (*Bucket, error) {
	if args == nil {
		args = &BucketArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Bucket
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:storage:Bucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type bucketArgs struct {
	// Configures bucket name in AWS.
	BucketName *string `pulumi:"bucketName"`
	// Configures a random bucket name in AWS but specifying a prefix name.
	BucketNamePrefix *string `pulumi:"bucketNamePrefix"`
	// Configures encryption parameters for the bucket
	Encryption *BucketEncryption `pulumi:"encryption"`
	// Set to true to allow policies that may provide access to anyone.
	Public *bool `pulumi:"public"`
	// Configures replication parameters for the bucket
	Replication *BucketReplication `pulumi:"replication"`
	// Set a certain versioning mode for bucket objects
	Versioning *BucketVersioningState `pulumi:"versioning"`
	// Configures a static webpage using bucket files
	Website *BucketWebsite `pulumi:"website"`
}

// The set of arguments for constructing a Bucket resource.
type BucketArgs struct {
	// Configures bucket name in AWS.
	BucketName pulumi.StringPtrInput
	// Configures a random bucket name in AWS but specifying a prefix name.
	BucketNamePrefix pulumi.StringPtrInput
	// Configures encryption parameters for the bucket
	Encryption BucketEncryptionPtrInput
	// Set to true to allow policies that may provide access to anyone.
	Public pulumi.BoolPtrInput
	// Configures replication parameters for the bucket
	Replication BucketReplicationPtrInput
	// Set a certain versioning mode for bucket objects
	Versioning BucketVersioningStatePtrInput
	// Configures a static webpage using bucket files
	Website BucketWebsitePtrInput
}

func (BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketArgs)(nil)).Elem()
}

type BucketInput interface {
	pulumi.Input

	ToBucketOutput() BucketOutput
	ToBucketOutputWithContext(ctx context.Context) BucketOutput
}

func (*Bucket) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (i *Bucket) ToBucketOutput() BucketOutput {
	return i.ToBucketOutputWithContext(context.Background())
}

func (i *Bucket) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOutput)
}

// BucketArrayInput is an input type that accepts BucketArray and BucketArrayOutput values.
// You can construct a concrete instance of `BucketArrayInput` via:
//
//	BucketArray{ BucketArgs{...} }
type BucketArrayInput interface {
	pulumi.Input

	ToBucketArrayOutput() BucketArrayOutput
	ToBucketArrayOutputWithContext(context.Context) BucketArrayOutput
}

type BucketArray []BucketInput

func (BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bucket)(nil)).Elem()
}

func (i BucketArray) ToBucketArrayOutput() BucketArrayOutput {
	return i.ToBucketArrayOutputWithContext(context.Background())
}

func (i BucketArray) ToBucketArrayOutputWithContext(ctx context.Context) BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketArrayOutput)
}

// BucketMapInput is an input type that accepts BucketMap and BucketMapOutput values.
// You can construct a concrete instance of `BucketMapInput` via:
//
//	BucketMap{ "key": BucketArgs{...} }
type BucketMapInput interface {
	pulumi.Input

	ToBucketMapOutput() BucketMapOutput
	ToBucketMapOutputWithContext(context.Context) BucketMapOutput
}

type BucketMap map[string]BucketInput

func (BucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bucket)(nil)).Elem()
}

func (i BucketMap) ToBucketMapOutput() BucketMapOutput {
	return i.ToBucketMapOutputWithContext(context.Background())
}

func (i BucketMap) ToBucketMapOutputWithContext(ctx context.Context) BucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketMapOutput)
}

type BucketOutput struct{ *pulumi.OutputState }

func (BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (o BucketOutput) ToBucketOutput() BucketOutput {
	return o
}

func (o BucketOutput) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return o
}

// Instance of our Bucket
func (o BucketOutput) Bucket() s3.BucketV2Output {
	return o.ApplyT(func(v *Bucket) s3.BucketV2Output { return v.Bucket }).(s3.BucketV2Output)
}

// Configuration for controlling bucket encryption
func (o BucketOutput) BucketEncryption() s3.BucketServerSideEncryptionConfigurationV2Output {
	return o.ApplyT(func(v *Bucket) s3.BucketServerSideEncryptionConfigurationV2Output { return v.BucketEncryption }).(s3.BucketServerSideEncryptionConfigurationV2Output)
}

// Enforce that bucket owner is all bucket objects
func (o BucketOutput) BucketOwnership() s3.BucketOwnershipControlsOutput {
	return o.ApplyT(func(v *Bucket) s3.BucketOwnershipControlsOutput { return v.BucketOwnership }).(s3.BucketOwnershipControlsOutput)
}

// Controls that IAM policies complies with bucket visibility (public or private)
func (o BucketOutput) BucketPublicAccess() s3.BucketPublicAccessBlockOutput {
	return o.ApplyT(func(v *Bucket) s3.BucketPublicAccessBlockOutput { return v.BucketPublicAccess }).(s3.BucketPublicAccessBlockOutput)
}

// Policy to make public all objects if bucket visibility is public
func (o BucketOutput) BucketPublicAccessPolicy() s3.BucketPolicyOutput {
	return o.ApplyT(func(v *Bucket) s3.BucketPolicyOutput { return v.BucketPublicAccessPolicy }).(s3.BucketPolicyOutput)
}

// Configuration for controlling bucket versioning
func (o BucketOutput) BucketVersioning() s3.BucketVersioningV2Output {
	return o.ApplyT(func(v *Bucket) s3.BucketVersioningV2Output { return v.BucketVersioning }).(s3.BucketVersioningV2Output)
}

// Policy for read-only users
func (o BucketOutput) ReadOnlyBucketPolicy() iam.PolicyOutput {
	return o.ApplyT(func(v *Bucket) iam.PolicyOutput { return v.ReadOnlyBucketPolicy }).(iam.PolicyOutput)
}

// Configuration to perform bucket replication
func (o BucketOutput) ReplicationConfig() s3.BucketReplicationConfigOutput {
	return o.ApplyT(func(v *Bucket) s3.BucketReplicationConfigOutput { return v.ReplicationConfig }).(s3.BucketReplicationConfigOutput)
}

// Policy attachments to perform bucket replication
func (o BucketOutput) ReplicationPolicyAttachment() iam.RolePolicyAttachmentOutput {
	return o.ApplyT(func(v *Bucket) iam.RolePolicyAttachmentOutput { return v.ReplicationPolicyAttachment }).(iam.RolePolicyAttachmentOutput)
}

// Required role for managing bucket
func (o BucketOutput) Role() iam.RoleOutput {
	return o.ApplyT(func(v *Bucket) iam.RoleOutput { return v.Role }).(iam.RoleOutput)
}

// Configuration to setup a website
func (o BucketOutput) Website() s3.BucketWebsiteConfigurationV2Output {
	return o.ApplyT(func(v *Bucket) s3.BucketWebsiteConfigurationV2Output { return v.Website }).(s3.BucketWebsiteConfigurationV2Output)
}

// Policy for write users
func (o BucketOutput) WriteBucketPolicy() iam.PolicyOutput {
	return o.ApplyT(func(v *Bucket) iam.PolicyOutput { return v.WriteBucketPolicy }).(iam.PolicyOutput)
}

type BucketArrayOutput struct{ *pulumi.OutputState }

func (BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bucket)(nil)).Elem()
}

func (o BucketArrayOutput) ToBucketArrayOutput() BucketArrayOutput {
	return o
}

func (o BucketArrayOutput) ToBucketArrayOutputWithContext(ctx context.Context) BucketArrayOutput {
	return o
}

func (o BucketArrayOutput) Index(i pulumi.IntInput) BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bucket {
		return vs[0].([]*Bucket)[vs[1].(int)]
	}).(BucketOutput)
}

type BucketMapOutput struct{ *pulumi.OutputState }

func (BucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bucket)(nil)).Elem()
}

func (o BucketMapOutput) ToBucketMapOutput() BucketMapOutput {
	return o
}

func (o BucketMapOutput) ToBucketMapOutputWithContext(ctx context.Context) BucketMapOutput {
	return o
}

func (o BucketMapOutput) MapIndex(k pulumi.StringInput) BucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bucket {
		return vs[0].(map[string]*Bucket)[vs[1].(string)]
	}).(BucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketInput)(nil)).Elem(), &Bucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketArrayInput)(nil)).Elem(), BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketMapInput)(nil)).Elem(), BucketMap{})
	pulumi.RegisterOutputType(BucketOutput{})
	pulumi.RegisterOutputType(BucketArrayOutput{})
	pulumi.RegisterOutputType(BucketMapOutput{})
}
