// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package landingzone

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a Landing Zone with the Organization, the AuditLogging, the AWS Accounts and the
type LandingZone struct {
	pulumi.ResourceState

	// The AuditLogging component.
	AuditLogging AuditLoggingOutput `pulumi:"auditLogging"`
	// The Organization components.
	Organization OrganizationOutput `pulumi:"organization"`
}

// NewLandingZone registers a new resource with the given unique name, arguments, and options.
func NewLandingZone(ctx *pulumi.Context,
	name string, args *LandingZoneArgs, opts ...pulumi.ResourceOption) (*LandingZone, error) {
	if args == nil {
		args = &LandingZoneArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource LandingZone
	err := ctx.RegisterRemoteComponentResource("cloud-toolkit-aws:landingzone:LandingZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type landingZoneArgs struct {
	Audit        *LandingZoneAudit `pulumi:"audit"`
	Iam          *LandingZoneIam   `pulumi:"iam"`
	Organization *OrganizationType `pulumi:"organization"`
}

// The set of arguments for constructing a LandingZone resource.
type LandingZoneArgs struct {
	Audit        LandingZoneAuditPtrInput
	Iam          LandingZoneIamPtrInput
	Organization OrganizationTypePtrInput
}

func (LandingZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*landingZoneArgs)(nil)).Elem()
}

type LandingZoneInput interface {
	pulumi.Input

	ToLandingZoneOutput() LandingZoneOutput
	ToLandingZoneOutputWithContext(ctx context.Context) LandingZoneOutput
}

func (*LandingZone) ElementType() reflect.Type {
	return reflect.TypeOf((**LandingZone)(nil)).Elem()
}

func (i *LandingZone) ToLandingZoneOutput() LandingZoneOutput {
	return i.ToLandingZoneOutputWithContext(context.Background())
}

func (i *LandingZone) ToLandingZoneOutputWithContext(ctx context.Context) LandingZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LandingZoneOutput)
}

// LandingZoneArrayInput is an input type that accepts LandingZoneArray and LandingZoneArrayOutput values.
// You can construct a concrete instance of `LandingZoneArrayInput` via:
//
//	LandingZoneArray{ LandingZoneArgs{...} }
type LandingZoneArrayInput interface {
	pulumi.Input

	ToLandingZoneArrayOutput() LandingZoneArrayOutput
	ToLandingZoneArrayOutputWithContext(context.Context) LandingZoneArrayOutput
}

type LandingZoneArray []LandingZoneInput

func (LandingZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LandingZone)(nil)).Elem()
}

func (i LandingZoneArray) ToLandingZoneArrayOutput() LandingZoneArrayOutput {
	return i.ToLandingZoneArrayOutputWithContext(context.Background())
}

func (i LandingZoneArray) ToLandingZoneArrayOutputWithContext(ctx context.Context) LandingZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LandingZoneArrayOutput)
}

// LandingZoneMapInput is an input type that accepts LandingZoneMap and LandingZoneMapOutput values.
// You can construct a concrete instance of `LandingZoneMapInput` via:
//
//	LandingZoneMap{ "key": LandingZoneArgs{...} }
type LandingZoneMapInput interface {
	pulumi.Input

	ToLandingZoneMapOutput() LandingZoneMapOutput
	ToLandingZoneMapOutputWithContext(context.Context) LandingZoneMapOutput
}

type LandingZoneMap map[string]LandingZoneInput

func (LandingZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LandingZone)(nil)).Elem()
}

func (i LandingZoneMap) ToLandingZoneMapOutput() LandingZoneMapOutput {
	return i.ToLandingZoneMapOutputWithContext(context.Background())
}

func (i LandingZoneMap) ToLandingZoneMapOutputWithContext(ctx context.Context) LandingZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LandingZoneMapOutput)
}

type LandingZoneOutput struct{ *pulumi.OutputState }

func (LandingZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LandingZone)(nil)).Elem()
}

func (o LandingZoneOutput) ToLandingZoneOutput() LandingZoneOutput {
	return o
}

func (o LandingZoneOutput) ToLandingZoneOutputWithContext(ctx context.Context) LandingZoneOutput {
	return o
}

// The AuditLogging component.
func (o LandingZoneOutput) AuditLogging() AuditLoggingOutput {
	return o.ApplyT(func(v *LandingZone) AuditLoggingOutput { return v.AuditLogging }).(AuditLoggingOutput)
}

// The Organization components.
func (o LandingZoneOutput) Organization() OrganizationOutput {
	return o.ApplyT(func(v *LandingZone) OrganizationOutput { return v.Organization }).(OrganizationOutput)
}

type LandingZoneArrayOutput struct{ *pulumi.OutputState }

func (LandingZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LandingZone)(nil)).Elem()
}

func (o LandingZoneArrayOutput) ToLandingZoneArrayOutput() LandingZoneArrayOutput {
	return o
}

func (o LandingZoneArrayOutput) ToLandingZoneArrayOutputWithContext(ctx context.Context) LandingZoneArrayOutput {
	return o
}

func (o LandingZoneArrayOutput) Index(i pulumi.IntInput) LandingZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LandingZone {
		return vs[0].([]*LandingZone)[vs[1].(int)]
	}).(LandingZoneOutput)
}

type LandingZoneMapOutput struct{ *pulumi.OutputState }

func (LandingZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LandingZone)(nil)).Elem()
}

func (o LandingZoneMapOutput) ToLandingZoneMapOutput() LandingZoneMapOutput {
	return o
}

func (o LandingZoneMapOutput) ToLandingZoneMapOutputWithContext(ctx context.Context) LandingZoneMapOutput {
	return o
}

func (o LandingZoneMapOutput) MapIndex(k pulumi.StringInput) LandingZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LandingZone {
		return vs[0].(map[string]*LandingZone)[vs[1].(string)]
	}).(LandingZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LandingZoneInput)(nil)).Elem(), &LandingZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*LandingZoneArrayInput)(nil)).Elem(), LandingZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LandingZoneMapInput)(nil)).Elem(), LandingZoneMap{})
	pulumi.RegisterOutputType(LandingZoneOutput{})
	pulumi.RegisterOutputType(LandingZoneArrayOutput{})
	pulumi.RegisterOutputType(LandingZoneMapOutput{})
}
